{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _assertThisInitialized2=_interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _react=_interopRequireWildcard(require(\"react\"));var React=_react;var _invariant=_interopRequireDefault(require(\"invariant\"));var _reactNative=require(\"react-native\");var _PanGestureHandler=require(\"../handlers/PanGestureHandler\");var _TapGestureHandler=require(\"../handlers/TapGestureHandler\");var _State=require(\"../State\");function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2.default)(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2.default)(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2.default)(this,result);};}function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));}catch(t){}return(_isNativeReflectConstruct=function _isNativeReflectConstruct(){return!!t;})();}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var DRAG_TOSS=0.05;var IDLE='Idle';var DRAGGING='Dragging';var SETTLING='Settling';var DrawerLayout=exports.default=function(_Component){(0,_inherits2.default)(DrawerLayout,_Component);var _super=_createSuper(DrawerLayout);function DrawerLayout(_props){var _this;(0,_classCallCheck2.default)(this,DrawerLayout);_this=_super.call(this,_props);_defineProperty((0,_assertThisInitialized2.default)(_this),\"openValue\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"onGestureEvent\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"accessibilityIsModalView\",React.createRef());_defineProperty((0,_assertThisInitialized2.default)(_this),\"pointerEventsView\",React.createRef());_defineProperty((0,_assertThisInitialized2.default)(_this),\"panGestureHandler\",React.createRef());_defineProperty((0,_assertThisInitialized2.default)(_this),\"drawerShown\",false);_defineProperty((0,_assertThisInitialized2.default)(_this),\"updateAnimatedEvent\",function(props,state){var drawerPosition=props.drawerPosition,drawerWidth=props.drawerWidth,drawerType=props.drawerType;var dragXValue=state.dragX,touchXValue=state.touchX,drawerTranslation=state.drawerTranslation,containerWidth=state.containerWidth;var dragX=dragXValue;var touchX=touchXValue;if(drawerPosition!=='left'){dragX=_reactNative.Animated.multiply(new _reactNative.Animated.Value(-1),dragXValue);touchX=_reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth),_reactNative.Animated.multiply(new _reactNative.Animated.Value(-1),touchXValue));touchXValue.setValue(containerWidth);}else{touchXValue.setValue(0);}var translationX=dragX;if(drawerType==='front'){var startPositionX=_reactNative.Animated.add(touchX,_reactNative.Animated.multiply(new _reactNative.Animated.Value(-1),dragX));var dragOffsetFromOnStartPosition=startPositionX.interpolate({inputRange:[drawerWidth-1,drawerWidth,drawerWidth+1],outputRange:[0,0,1]});translationX=_reactNative.Animated.add(dragX,dragOffsetFromOnStartPosition);}_this.openValue=_reactNative.Animated.add(translationX,drawerTranslation).interpolate({inputRange:[0,drawerWidth],outputRange:[0,1],extrapolate:'clamp'});var gestureOptions={useNativeDriver:props.useNativeAnimations};if(_this.props.onDrawerSlide){gestureOptions.listener=function(ev){var _this$props$onDrawerS,_this$props;var translationX=Math.floor(Math.abs(ev.nativeEvent.translationX));var position=translationX/_this.state.containerWidth;(_this$props$onDrawerS=(_this$props=_this.props).onDrawerSlide)===null||_this$props$onDrawerS===void 0?void 0:_this$props$onDrawerS.call(_this$props,position);};}_this.onGestureEvent=_reactNative.Animated.event([{nativeEvent:{translationX:dragXValue,x:touchXValue}}],gestureOptions);});_defineProperty((0,_assertThisInitialized2.default)(_this),\"handleContainerLayout\",function(_ref){var nativeEvent=_ref.nativeEvent;_this.setState({containerWidth:nativeEvent.layout.width});});_defineProperty((0,_assertThisInitialized2.default)(_this),\"emitStateChanged\",function(newState,drawerWillShow){var _this$props$onDrawerS2,_this$props2;(_this$props$onDrawerS2=(_this$props2=_this.props).onDrawerStateChanged)===null||_this$props$onDrawerS2===void 0?void 0:_this$props$onDrawerS2.call(_this$props2,newState,drawerWillShow);});_defineProperty((0,_assertThisInitialized2.default)(_this),\"openingHandlerStateChange\",function(_ref2){var nativeEvent=_ref2.nativeEvent;if(nativeEvent.oldState===_State.State.ACTIVE){_this.handleRelease({nativeEvent:nativeEvent});}else if(nativeEvent.state===_State.State.ACTIVE){_this.emitStateChanged(DRAGGING,false);_this.setState({drawerState:DRAGGING});if(_this.props.keyboardDismissMode==='on-drag'){_reactNative.Keyboard.dismiss();}if(_this.props.hideStatusBar){_reactNative.StatusBar.setHidden(true,_this.props.statusBarAnimation||'slide');}}});_defineProperty((0,_assertThisInitialized2.default)(_this),\"onTapHandlerStateChange\",function(_ref3){var nativeEvent=_ref3.nativeEvent;if(_this.drawerShown&&nativeEvent.oldState===_State.State.ACTIVE&&_this.props.drawerLockMode!=='locked-open'){_this.closeDrawer();}});_defineProperty((0,_assertThisInitialized2.default)(_this),\"handleRelease\",function(_ref4){var nativeEvent=_ref4.nativeEvent;var _this$props6=_this.props,drawerWidth=_this$props6.drawerWidth,drawerPosition=_this$props6.drawerPosition,drawerType=_this$props6.drawerType;var containerWidth=_this.state.containerWidth;var dragX=nativeEvent.translationX,velocityX=nativeEvent.velocityX,touchX=nativeEvent.x;if(drawerPosition!=='left'){dragX=-dragX;touchX=containerWidth-touchX;velocityX=-velocityX;}var gestureStartX=touchX-dragX;var dragOffsetBasedOnStart=0;if(drawerType==='front'){dragOffsetBasedOnStart=gestureStartX>drawerWidth?gestureStartX-drawerWidth:0;}var startOffsetX=dragX+dragOffsetBasedOnStart+(_this.drawerShown?drawerWidth:0);var projOffsetX=startOffsetX+DRAG_TOSS*velocityX;var shouldOpen=projOffsetX>drawerWidth/2;if(shouldOpen){_this.animateDrawer(startOffsetX,drawerWidth,velocityX);}else{_this.animateDrawer(startOffsetX,0,velocityX);}});_defineProperty((0,_assertThisInitialized2.default)(_this),\"updateShowing\",function(showing){var _this$accessibilityIs,_this$pointerEventsVi,_this$panGestureHandl;_this.drawerShown=showing;(_this$accessibilityIs=_this.accessibilityIsModalView.current)===null||_this$accessibilityIs===void 0?void 0:_this$accessibilityIs.setNativeProps({accessibilityViewIsModal:showing});(_this$pointerEventsVi=_this.pointerEventsView.current)===null||_this$pointerEventsVi===void 0?void 0:_this$pointerEventsVi.setNativeProps({pointerEvents:showing?'auto':'none'});var _this$props7=_this.props,drawerPosition=_this$props7.drawerPosition,minSwipeDistance=_this$props7.minSwipeDistance,edgeWidth=_this$props7.edgeWidth;var fromLeft=drawerPosition==='left';var gestureOrientation=(fromLeft?1:-1)*(_this.drawerShown?-1:1);var hitSlop=fromLeft?{left:0,width:showing?undefined:edgeWidth}:{right:0,width:showing?undefined:edgeWidth};(_this$panGestureHandl=_this.panGestureHandler.current)===null||_this$panGestureHandl===void 0?void 0:_this$panGestureHandl.setNativeProps({hitSlop:hitSlop,activeOffsetX:gestureOrientation*minSwipeDistance});});_defineProperty((0,_assertThisInitialized2.default)(_this),\"animateDrawer\",function(fromValue,toValue,velocity,speed){_this.state.dragX.setValue(0);_this.state.touchX.setValue(_this.props.drawerPosition==='left'?0:_this.state.containerWidth);if(fromValue!=null){var nextFramePosition=fromValue;if(_this.props.useNativeAnimations){if(fromValue<toValue&&velocity>0){nextFramePosition=Math.min(fromValue+velocity/60.0,toValue);}else if(fromValue>toValue&&velocity<0){nextFramePosition=Math.max(fromValue+velocity/60.0,toValue);}}_this.state.drawerTranslation.setValue(nextFramePosition);}var willShow=toValue!==0;_this.updateShowing(willShow);_this.emitStateChanged(SETTLING,willShow);_this.setState({drawerState:SETTLING});if(_this.props.hideStatusBar){_reactNative.StatusBar.setHidden(willShow,_this.props.statusBarAnimation||'slide');}_reactNative.Animated.spring(_this.state.drawerTranslation,{velocity:velocity,bounciness:0,toValue:toValue,useNativeDriver:_this.props.useNativeAnimations,speed:speed!==null&&speed!==void 0?speed:undefined}).start(function(_ref5){var finished=_ref5.finished;if(finished){_this.emitStateChanged(IDLE,willShow);_this.setState({drawerOpened:willShow});if(_this.state.drawerState!==DRAGGING){_this.setState({drawerState:IDLE});}if(willShow){var _this$props$onDrawerO,_this$props3;(_this$props$onDrawerO=(_this$props3=_this.props).onDrawerOpen)===null||_this$props$onDrawerO===void 0?void 0:_this$props$onDrawerO.call(_this$props3);}else{var _this$props$onDrawerC,_this$props4;(_this$props$onDrawerC=(_this$props4=_this.props).onDrawerClose)===null||_this$props$onDrawerC===void 0?void 0:_this$props$onDrawerC.call(_this$props4);}}});});_defineProperty((0,_assertThisInitialized2.default)(_this),\"openDrawer\",function(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_this.animateDrawer(undefined,_this.props.drawerWidth,options.velocity?options.velocity:0,options.speed);_this.forceUpdate();});_defineProperty((0,_assertThisInitialized2.default)(_this),\"closeDrawer\",function(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_this.animateDrawer(undefined,0,options.velocity?options.velocity:0,options.speed);_this.forceUpdate();});_defineProperty((0,_assertThisInitialized2.default)(_this),\"renderOverlay\",function(){(0,_invariant.default)(_this.openValue,'should be set');var overlayOpacity;if(_this.state.drawerState!==IDLE){overlayOpacity=_this.openValue;}else{overlayOpacity=_this.state.drawerOpened?1:0;}var dynamicOverlayStyles={opacity:overlayOpacity,backgroundColor:_this.props.overlayColor};return React.createElement(_TapGestureHandler.TapGestureHandler,{onHandlerStateChange:_this.onTapHandlerStateChange},React.createElement(_reactNative.Animated.View,{pointerEvents:_this.drawerShown?'auto':'none',ref:_this.pointerEventsView,style:[styles.overlay,dynamicOverlayStyles]}));});_defineProperty((0,_assertThisInitialized2.default)(_this),\"renderDrawer\",function(){var _this$props8=_this.props,drawerBackgroundColor=_this$props8.drawerBackgroundColor,drawerWidth=_this$props8.drawerWidth,drawerPosition=_this$props8.drawerPosition,drawerType=_this$props8.drawerType,drawerContainerStyle=_this$props8.drawerContainerStyle,contentContainerStyle=_this$props8.contentContainerStyle;var fromLeft=drawerPosition==='left';var drawerSlide=drawerType!=='back';var containerSlide=drawerType!=='front';var reverseContentDirection=_reactNative.I18nManager.isRTL?fromLeft:!fromLeft;var dynamicDrawerStyles={backgroundColor:drawerBackgroundColor,width:drawerWidth};var openValue=_this.openValue;(0,_invariant.default)(openValue,'should be set');var containerStyles;if(containerSlide){var containerTranslateX=openValue.interpolate({inputRange:[0,1],outputRange:fromLeft?[0,drawerWidth]:[0,-drawerWidth],extrapolate:'clamp'});containerStyles={transform:[{translateX:containerTranslateX}]};}var drawerTranslateX=0;if(drawerSlide){var closedDrawerOffset=fromLeft?-drawerWidth:drawerWidth;if(_this.state.drawerState!==IDLE){drawerTranslateX=openValue.interpolate({inputRange:[0,1],outputRange:[closedDrawerOffset,0],extrapolate:'clamp'});}else{drawerTranslateX=_this.state.drawerOpened?0:closedDrawerOffset;}}var drawerStyles={transform:[{translateX:drawerTranslateX}],flexDirection:reverseContentDirection?'row-reverse':'row'};return React.createElement(_reactNative.Animated.View,{style:styles.main,onLayout:_this.handleContainerLayout},React.createElement(_reactNative.Animated.View,{style:[drawerType==='front'?styles.containerOnBack:styles.containerInFront,containerStyles,contentContainerStyle],importantForAccessibility:_this.drawerShown?'no-hide-descendants':'yes'},typeof _this.props.children==='function'?_this.props.children(_this.openValue):_this.props.children,_this.renderOverlay()),React.createElement(_reactNative.Animated.View,{pointerEvents:\"box-none\",ref:_this.accessibilityIsModalView,accessibilityViewIsModal:_this.drawerShown,style:[styles.drawerContainer,drawerStyles,drawerContainerStyle]},React.createElement(_reactNative.View,{style:dynamicDrawerStyles},_this.props.renderNavigationView(_this.openValue))));});_defineProperty((0,_assertThisInitialized2.default)(_this),\"setPanGestureRef\",function(ref){var _this$props$onGesture,_this$props5;_this.panGestureHandler.current=ref;(_this$props$onGesture=(_this$props5=_this.props).onGestureRef)===null||_this$props$onGesture===void 0?void 0:_this$props$onGesture.call(_this$props5,ref);});var _dragX=new _reactNative.Animated.Value(0);var _touchX=new _reactNative.Animated.Value(0);var _drawerTranslation=new _reactNative.Animated.Value(0);_this.state={dragX:_dragX,touchX:_touchX,drawerTranslation:_drawerTranslation,containerWidth:0,drawerState:IDLE,drawerOpened:false};_this.updateAnimatedEvent(_props,_this.state);return _this;}(0,_createClass2.default)(DrawerLayout,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(props,state){if(this.props.drawerPosition!==props.drawerPosition||this.props.drawerWidth!==props.drawerWidth||this.props.drawerType!==props.drawerType||this.state.containerWidth!==state.containerWidth){this.updateAnimatedEvent(props,state);}return true;}},{key:\"render\",value:function render(){var _this$props9=this.props,drawerPosition=_this$props9.drawerPosition,drawerLockMode=_this$props9.drawerLockMode,edgeWidth=_this$props9.edgeWidth,minSwipeDistance=_this$props9.minSwipeDistance;var fromLeft=drawerPosition==='left';var gestureOrientation=(fromLeft?1:-1)*(this.drawerShown?-1:1);var hitSlop=fromLeft?{left:0,width:this.drawerShown?undefined:edgeWidth}:{right:0,width:this.drawerShown?undefined:edgeWidth};return React.createElement(_PanGestureHandler.PanGestureHandler,{userSelect:this.props.userSelect,ref:this.setPanGestureRef,hitSlop:hitSlop,activeOffsetX:gestureOrientation*minSwipeDistance,failOffsetY:[-15,15],onGestureEvent:this.onGestureEvent,onHandlerStateChange:this.openingHandlerStateChange,enableTrackpadTwoFingerGesture:this.props.enableTrackpadTwoFingerGesture,enabled:drawerLockMode!=='locked-closed'&&drawerLockMode!=='locked-open'},this.renderDrawer());}}]);return DrawerLayout;}(_react.Component);_defineProperty(DrawerLayout,\"defaultProps\",{drawerWidth:200,drawerPosition:'left',useNativeAnimations:true,drawerType:'front',edgeWidth:20,minSwipeDistance:3,overlayColor:'rgba(0, 0, 0, 0.7)',drawerLockMode:'unlocked',enableTrackpadTwoFingerGesture:false});_defineProperty(DrawerLayout,\"positions\",{Left:'left',Right:'right'});var styles=_reactNative.StyleSheet.create({drawerContainer:(0,_extends2.default)({},_reactNative.StyleSheet.absoluteFillObject,{zIndex:1001,flexDirection:'row'}),containerInFront:(0,_extends2.default)({},_reactNative.StyleSheet.absoluteFillObject,{zIndex:1002}),containerOnBack:(0,_extends2.default)({},_reactNative.StyleSheet.absoluteFillObject),main:{flex:1,zIndex:0,overflow:'hidden'},overlay:(0,_extends2.default)({},_reactNative.StyleSheet.absoluteFillObject,{zIndex:1000})});","map":{"version":3,"names":["_react","_interopRequireWildcard","require","React","_invariant","_interopRequireDefault","_reactNative","_PanGestureHandler","_TapGestureHandler","_State","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","Boolean","valueOf","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","exports","_Component","_inherits2","_super","_props","_this","_classCallCheck2","_defineProperty","_assertThisInitialized2","createRef","props","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","_this$props$onDrawerS","_this$props","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","_ref","setState","layout","width","newState","drawerWillShow","_this$props$onDrawerS2","_this$props2","onDrawerStateChanged","_ref2","oldState","State","ACTIVE","handleRelease","emitStateChanged","drawerState","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","_ref3","drawerShown","drawerLockMode","closeDrawer","_ref4","_this$props6","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","showing","_this$accessibilityIs","_this$pointerEventsVi","_this$panGestureHandl","accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","pointerEventsView","pointerEvents","_this$props7","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","panGestureHandler","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","updateShowing","spring","bounciness","start","_ref5","finished","drawerOpened","_this$props$onDrawerO","_this$props3","onDrawerOpen","_this$props$onDrawerC","_this$props4","onDrawerClose","options","length","forceUpdate","invariant","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","createElement","TapGestureHandler","onHandlerStateChange","onTapHandlerStateChange","View","ref","style","styles","overlay","_this$props8","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","handleContainerLayout","containerOnBack","containerInFront","importantForAccessibility","children","renderOverlay","drawerContainer","renderNavigationView","_this$props$onGesture","_this$props5","onGestureRef","_dragX","_touchX","_drawerTranslation","updateAnimatedEvent","_createClass2","key","value","shouldComponentUpdate","render","_this$props9","PanGestureHandler","userSelect","setPanGestureRef","failOffsetY","openingHandlerStateChange","enableTrackpadTwoFingerGesture","enabled","renderDrawer","Component","Left","Right","StyleSheet","create","_extends2","absoluteFillObject","zIndex","flex","overflow"],"sources":["/Users/shayan/workspace/godfather/node_modules/react-native-gesture-handler/lib/module/components/DrawerLayout.tsx"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies on\n// react-native-gesture-handler library which isn't very popular at the moment I\n// decided to keep it here for the time being. It will allow us to move faster\n// and fix issues that may arise in gesture handler library that could be found\n// when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n  UserSelect,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\nexport type DrawerPosition = 'left' | 'right';\n\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\nexport type DrawerType = 'front' | 'back' | 'slide';\n\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native`\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\nexport interface DrawerLayoutProps {\n  /**\n   * This attribute is present in the standard implementation already and is one\n   * of the required params. Gesture handler version of DrawerLayout make it\n   * possible for the function passed as `renderNavigationView` to take an\n   * Animated value as a parameter that indicates the progress of drawer\n   * opening/closing animation (progress value is 0 when closed and 1 when\n   * opened). This can be used by the drawer component to animated its children\n   * while the drawer is opening or closing.\n   */\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n\n  drawerPosition?: DrawerPosition;\n\n  drawerWidth?: number;\n\n  drawerBackgroundColor?: string;\n\n  drawerLockMode?: DrawerLockMode;\n\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n\n  /**\n   * Called when the drawer is closed.\n   */\n  onDrawerClose?: () => void;\n\n  /**\n   * Called when the drawer is opened.\n   */\n  onDrawerOpen?: () => void;\n\n  /**\n   * Called when the status of the drawer changes.\n   */\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n\n  /**\n   * Defines how far from the edge of the content view the gesture should\n   * activate.\n   */\n  edgeWidth?: number;\n\n  minSwipeDistance?: number;\n\n  /**\n   * When set to true Drawer component will use\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\n   * status bar whenever the drawer is pulled or when its in an \"open\" state.\n   */\n  hideStatusBar?: boolean;\n\n  /**\n   * @default 'slide'\n   *\n   * Can be used when hideStatusBar is set to true and will select the animation\n   * used for hiding/showing the status bar. See\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\n   * more details\n   */\n  statusBarAnimation?: StatusBarAnimation;\n\n  /**\n   * @default black\n   *\n   * Color of a semi-transparent overlay to be displayed on top of the content\n   * view when drawer gets open. A solid color should be used as the opacity is\n   * added by the Drawer itself and the opacity of the overlay is animated (from\n   * 0% to 70%).\n   */\n  overlayColor?: string;\n\n  contentContainerStyle?: StyleProp<ViewStyle>;\n\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  onDrawerSlide?: (position: number) => void;\n\n  onGestureRef?: (ref: PanGestureHandler) => void;\n\n  // implicit `children` prop has been removed in @types/react^18.0.0\n  children?:\n    | React.ReactNode\n    | ((openValue?: AnimatedInterpolation) => React.ReactNode);\n\n  /**\n   * @default 'none'\n   * Defines which userSelect property should be used.\n   * Values: 'none'|'text'|'auto'\n   */\n  userSelect?: UserSelect;\n}\n\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n  drawerState: DrawerState;\n  drawerOpened: boolean;\n};\n\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  shouldComponentUpdate(props: DrawerLayoutProps, state: DrawerLayoutState) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private openValue?: AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView = React.createRef<View>();\n  private pointerEventsView = React.createRef<View>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer. In\n      // order to handle right-side drawer the only thing we need to do is to\n      // reverse events coming from gesture handler in a way they emulate\n      // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n      // calulcated by subtracing real touchX from the width of the container\n      // (such that when touch happens at the right edge the value is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep\n    // start position of the gesture. Then we use that value to calculate how\n    // much we need to subtract from the dragX. If the gesture started on the\n    // greyed out area we take the distance from the edge of the drawer to the\n    // start position. Otherwise we don't subtract at all and the drawer be\n    // pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      this.setState({ drawerState: DRAGGING });\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the\n        // animation because it takes one frame of a roundtrip to pass RELEASE\n        // event from native driver to JS before we can start animating. Without\n        // it, it is more noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    this.setState({ drawerState: SETTLING });\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        this.setState({ drawerOpened: willShow });\n        if (this.state.drawerState !== DRAGGING) {\n          // it's possilbe that user started drag while the drawer\n          // was settling, don't override state in this case\n          this.setState({ drawerState: IDLE });\n        }\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(\n      undefined,\n      0,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    let overlayOpacity;\n\n    if (this.state.drawerState !== IDLE) {\n      overlayOpacity = this.openValue;\n    } else {\n      overlayOpacity = this.state.drawerOpened ? 1 : 0;\n    }\n\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right\n    // according to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      if (this.state.drawerState !== IDLE) {\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp',\n        });\n      } else {\n        drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n      }\n    }\n    const drawerStyles: {\n      transform: { translateX: number | AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK taken from\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (\n      this.panGestureHandler as React.MutableRefObject<PanGestureHandler>\n    ).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const { drawerPosition, drawerLockMode, edgeWidth, minSwipeDistance } =\n      this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        userSelect={this.props.userSelect}\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}