{"ast":null,"code":"Object.defineProperty(exports,\"__esModule\",{value:true});exports.UpdatesLogEntryLevel=exports.UpdatesLogEntryCode=exports.UpdateEventType=void 0;var UpdateEventType;(function(UpdateEventType){UpdateEventType[\"UPDATE_AVAILABLE\"]=\"updateAvailable\";UpdateEventType[\"NO_UPDATE_AVAILABLE\"]=\"noUpdateAvailable\";UpdateEventType[\"ERROR\"]=\"error\";})(UpdateEventType||(exports.UpdateEventType=UpdateEventType={}));var UpdatesLogEntryCode;(function(UpdatesLogEntryCode){UpdatesLogEntryCode[\"NONE\"]=\"None\";UpdatesLogEntryCode[\"NO_UPDATES_AVAILABLE\"]=\"NoUpdatesAvailable\";UpdatesLogEntryCode[\"UPDATE_ASSETS_NOT_AVAILABLE\"]=\"UpdateAssetsNotAvailable\";UpdatesLogEntryCode[\"UPDATE_SERVER_UNREACHABLE\"]=\"UpdateServerUnreachable\";UpdatesLogEntryCode[\"UPDATE_HAS_INVALID_SIGNATURE\"]=\"UpdateHasInvalidSignature\";UpdatesLogEntryCode[\"UPDATE_CODE_SIGNING_ERROR\"]=\"UpdateCodeSigningError\";UpdatesLogEntryCode[\"UPDATE_FAILED_TO_LOAD\"]=\"UpdateFailedToLoad\";UpdatesLogEntryCode[\"ASSETS_FAILED_TO_LOAD\"]=\"AssetsFailedToLoad\";UpdatesLogEntryCode[\"JS_RUNTIME_ERROR\"]=\"JSRuntimeError\";UpdatesLogEntryCode[\"UNKNOWN\"]=\"Unknown\";})(UpdatesLogEntryCode||(exports.UpdatesLogEntryCode=UpdatesLogEntryCode={}));var UpdatesLogEntryLevel;(function(UpdatesLogEntryLevel){UpdatesLogEntryLevel[\"TRACE\"]=\"trace\";UpdatesLogEntryLevel[\"DEBUG\"]=\"debug\";UpdatesLogEntryLevel[\"INFO\"]=\"info\";UpdatesLogEntryLevel[\"WARN\"]=\"warn\";UpdatesLogEntryLevel[\"ERROR\"]=\"error\";UpdatesLogEntryLevel[\"FATAL\"]=\"fatal\";})(UpdatesLogEntryLevel||(exports.UpdatesLogEntryLevel=UpdatesLogEntryLevel={}));","map":{"version":3,"names":["UpdateEventType","exports","UpdatesLogEntryCode","UpdatesLogEntryLevel"],"sources":["/Users/shayan/workspace/godfather/node_modules/fiction-expo-restart/node_modules/expo-updates/src/Updates.types.ts"],"sourcesContent":["import Constants from 'expo-constants';\n\n/**\n * The types of update-related events.\n */\nexport enum UpdateEventType {\n  /**\n   * A new update has finished downloading to local storage. If you would like to start using this\n   * update at any point before the user closes and restarts the app on their own, you can call\n   * [`Updates.reloadAsync()`](#reloadasync) to launch this new update.\n   */\n  UPDATE_AVAILABLE = 'updateAvailable',\n  /**\n   * No updates are available, and the most up-to-date update is already running.\n   */\n  NO_UPDATE_AVAILABLE = 'noUpdateAvailable',\n  /**\n   * An error occurred trying to fetch the latest update.\n   */\n  ERROR = 'error',\n}\n\n// @docsMissing\n// TODO(eric): move source of truth for manifest type to this module\n/**\n * @hidden\n */\nexport type ClassicManifest = typeof Constants.manifest;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport type Manifest = ClassicManifest | typeof Constants.manifest2;\n// modern manifest type is intentionally not exported, since the plan is to call it just \"Manifest\"\n// in the future\n\n/**\n * The successful result of checking for a new update.\n */\ntype UpdateCheckResultSuccess = {\n  /**\n   * Signifies that an update is available.\n   */\n  isAvailable: true;\n  /**\n   * The manifest of the available update.\n   */\n  manifest: Manifest;\n};\n\n/**\n * The failed result of checking for a new update.\n */\ntype UpdateCheckResultFailure = {\n  /**\n   * Signifies that the app is already running the latest available update.\n   */\n  isAvailable: false;\n  /**\n   * No manifest, since the app is already running the latest available version.\n   */\n  manifest: undefined;\n};\n\n/**\n * The result of checking for a new update.\n */\nexport type UpdateCheckResult = UpdateCheckResultSuccess | UpdateCheckResultFailure;\n\n/**\n * The successful result of fetching a new update.\n */\ntype UpdateFetchResultSuccess = {\n  /**\n   * Signifies that the fetched bundle is new (that is, a different version than what's currently\n   * running).\n   */\n  isNew: true;\n  /**\n   * The manifest of the newly downloaded update.\n   */\n  manifest: Manifest;\n};\n\n/**\n * The failed result of fetching a new update.\n */\ntype UpdateFetchResultFailure = {\n  /**\n   * Signifies that the fetched bundle is the same as version which is currently running.\n   */\n  isNew: false;\n  /**\n   * No manifest, since there is no update.\n   */\n  manifest: undefined;\n};\n\n/**\n * The result of fetching a new update.\n */\nexport type UpdateFetchResult = UpdateFetchResultSuccess | UpdateFetchResultFailure;\n\n/**\n * An object that is passed into each event listener when an auto-update check occurs.\n */\nexport type UpdateEvent = {\n  /**\n   * Type of the event.\n   */\n  type: UpdateEventType;\n  /**\n   * If `type` is `Updates.UpdateEventType.UPDATE_AVAILABLE`, the manifest of the newly downloaded\n   * update, and `undefined` otherwise.\n   */\n  manifest?: Manifest;\n  /**\n   * If `type` is `Updates.UpdateEventType.ERROR`, the error message, and `undefined` otherwise.\n   */\n  message?: string;\n};\n\n/**\n * An object representing a single log entry from expo-updates logging on the client.\n */\nexport type UpdatesLogEntry = {\n  /**\n   * The time the log was written, in milliseconds since Jan 1 1970 UTC.\n   */\n  timestamp: number;\n  /**\n   * The log entry message.\n   */\n  message: string;\n  /**\n   * One of the defined code values for expo-updates log entries.\n   */\n  code: UpdatesLogEntryCode;\n  /**\n   * One of the defined log level or severity values.\n   */\n  level: UpdatesLogEntryLevel;\n  /**\n   * If present, the unique ID of an update associated with this log entry.\n   */\n  updateId?: string;\n  /**\n   * If present, the unique ID or hash of an asset associated with this log entry.\n   */\n  assetId?: string;\n  /**\n   * If present, an iOS or Android native stack trace associated with this log entry.\n   */\n  stacktrace?: string[];\n};\n\n/**\n * The possible code values for expo-updates log entries\n */\nexport enum UpdatesLogEntryCode {\n  NONE = 'None',\n  NO_UPDATES_AVAILABLE = 'NoUpdatesAvailable',\n  UPDATE_ASSETS_NOT_AVAILABLE = 'UpdateAssetsNotAvailable',\n  UPDATE_SERVER_UNREACHABLE = 'UpdateServerUnreachable',\n  UPDATE_HAS_INVALID_SIGNATURE = 'UpdateHasInvalidSignature',\n  UPDATE_CODE_SIGNING_ERROR = 'UpdateCodeSigningError',\n  UPDATE_FAILED_TO_LOAD = 'UpdateFailedToLoad',\n  ASSETS_FAILED_TO_LOAD = 'AssetsFailedToLoad',\n  JS_RUNTIME_ERROR = 'JSRuntimeError',\n  UNKNOWN = 'Unknown',\n}\n\n/**\n * The possible log levels for expo-updates log entries\n */\nexport enum UpdatesLogEntryLevel {\n  TRACE = 'trace',\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\n// @docsMissing\n/**\n * @hidden\n */\nexport type LocalAssets = Record<string, string>;\n"],"mappings":"iJAKA,GAAY,CAAAA,eAeX,CAfD,UAAYA,eAAe,EAMzBA,eAAA,sCAAoC,CAIpCA,eAAA,2CAAyC,CAIzCA,eAAA,iBAAe,CACjB,CAAC,EAfWA,eAAe,GAAAC,OAAA,CAAAD,eAAA,CAAfA,eAAe,MA2J3B,GAAY,CAAAE,mBAWX,CAXD,UAAYA,mBAAmB,EAC7BA,mBAAA,eAAa,CACbA,mBAAA,6CAA2C,CAC3CA,mBAAA,0DAAwD,CACxDA,mBAAA,uDAAqD,CACrDA,mBAAA,4DAA0D,CAC1DA,mBAAA,sDAAoD,CACpDA,mBAAA,8CAA4C,CAC5CA,mBAAA,8CAA4C,CAC5CA,mBAAA,qCAAmC,CACnCA,mBAAA,qBAAmB,CACrB,CAAC,EAXWA,mBAAmB,GAAAD,OAAA,CAAAC,mBAAA,CAAnBA,mBAAmB,MAgB/B,GAAY,CAAAC,oBAOX,CAPD,UAAYA,oBAAoB,EAC9BA,oBAAA,iBAAe,CACfA,oBAAA,iBAAe,CACfA,oBAAA,eAAa,CACbA,oBAAA,eAAa,CACbA,oBAAA,iBAAe,CACfA,oBAAA,iBAAe,CACjB,CAAC,EAPWA,oBAAoB,GAAAF,OAAA,CAAAE,oBAAA,CAApBA,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}