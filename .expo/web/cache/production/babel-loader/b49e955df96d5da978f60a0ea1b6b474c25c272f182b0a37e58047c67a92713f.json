{"ast":null,"code":"Object.defineProperty(exports,\"__esModule\",{value:true});exports.TouchEventType=exports.PointerType=exports.MouseButtons=exports.EventTypes=void 0;var MouseButtons;(function(MouseButtons){MouseButtons[MouseButtons[\"NONE\"]=0]=\"NONE\";MouseButtons[MouseButtons[\"LEFT\"]=1]=\"LEFT\";MouseButtons[MouseButtons[\"RIGHT\"]=2]=\"RIGHT\";MouseButtons[MouseButtons[\"LEFT_RIGHT\"]=3]=\"LEFT_RIGHT\";MouseButtons[MouseButtons[\"SCROLL\"]=4]=\"SCROLL\";MouseButtons[MouseButtons[\"SCROLL_LEFT\"]=5]=\"SCROLL_LEFT\";MouseButtons[MouseButtons[\"SCROLL_RIGHT\"]=6]=\"SCROLL_RIGHT\";MouseButtons[MouseButtons[\"SCROLL_LEFT_RIGHT\"]=7]=\"SCROLL_LEFT_RIGHT\";})(MouseButtons||(exports.MouseButtons=MouseButtons={}));var EventTypes;(function(EventTypes){EventTypes[EventTypes[\"DOWN\"]=0]=\"DOWN\";EventTypes[EventTypes[\"ADDITIONAL_POINTER_DOWN\"]=1]=\"ADDITIONAL_POINTER_DOWN\";EventTypes[EventTypes[\"UP\"]=2]=\"UP\";EventTypes[EventTypes[\"ADDITIONAL_POINTER_UP\"]=3]=\"ADDITIONAL_POINTER_UP\";EventTypes[EventTypes[\"MOVE\"]=4]=\"MOVE\";EventTypes[EventTypes[\"ENTER\"]=5]=\"ENTER\";EventTypes[EventTypes[\"OUT\"]=6]=\"OUT\";EventTypes[EventTypes[\"CANCEL\"]=7]=\"CANCEL\";})(EventTypes||(exports.EventTypes=EventTypes={}));var TouchEventType;(function(TouchEventType){TouchEventType[TouchEventType[\"UNDETERMINED\"]=0]=\"UNDETERMINED\";TouchEventType[TouchEventType[\"DOWN\"]=1]=\"DOWN\";TouchEventType[TouchEventType[\"MOVE\"]=2]=\"MOVE\";TouchEventType[TouchEventType[\"UP\"]=3]=\"UP\";TouchEventType[TouchEventType[\"CANCELLED\"]=4]=\"CANCELLED\";})(TouchEventType||(exports.TouchEventType=TouchEventType={}));var PointerType;(function(PointerType){PointerType[\"NONE\"]=\"none\";PointerType[\"MOUSE\"]=\"mouse\";PointerType[\"TOUCH\"]=\"touch\";PointerType[\"PEN\"]=\"pen\";})(PointerType||(exports.PointerType=PointerType={}));","map":{"version":3,"names":["MouseButtons","EventTypes","TouchEventType","PointerType"],"sources":["/Users/shayan/workspace/godfather/node_modules/react-native-gesture-handler/lib/module/web/interfaces.ts"],"sourcesContent":["import { UserSelect } from '../handlers/gestureHandlerCommon';\nimport { Directions } from '../Directions';\nimport { State } from '../State';\n\nexport interface HitSlop {\n  left?: number;\n  right?: number;\n  top?: number;\n  bottom?: number;\n  horizontal?: number;\n  vertical?: number;\n  width?: number;\n  height?: number;\n}\n\nexport interface Handler {\n  handlerTag: number;\n}\n\ntype ConfigArgs =\n  | number\n  | boolean\n  | HitSlop\n  | UserSelect\n  | Directions\n  | Handler[]\n  | null\n  | undefined;\n\nexport interface Config extends Record<string, ConfigArgs> {\n  enabled?: boolean;\n  simultaneousHandlers?: Handler[] | null;\n  waitFor?: Handler[] | null;\n  hitSlop?: HitSlop;\n  shouldCancelWhenOutside?: boolean;\n  userSelect?: UserSelect;\n\n  activateAfterLongPress?: number;\n  failOffsetXStart?: number;\n  failOffsetYStart?: number;\n  failOffsetXEnd?: number;\n  failOffsetYEnd?: number;\n  activeOffsetXStart?: number;\n  activeOffsetXEnd?: number;\n  activeOffsetYStart?: number;\n  activeOffsetYEnd?: number;\n  minPointers?: number;\n  maxPointers?: number;\n  minDist?: number;\n  minDistSq?: number;\n  minVelocity?: number;\n  minVelocityX?: number;\n  minVelocityY?: number;\n  minVelocitySq?: number;\n  maxDist?: number;\n  maxDistSq?: number;\n  numberOfPointers?: number;\n  minDurationMs?: number;\n  numberOfTaps?: number;\n  maxDurationMs?: number;\n  maxDelayMs?: number;\n  maxDeltaX?: number;\n  maxDeltaY?: number;\n  shouldActivateOnStart?: boolean;\n  disallowInterruption?: boolean;\n  direction?: Directions;\n}\n\ntype NativeEventArgs = number | State | boolean | undefined;\ninterface NativeEvent extends Record<string, NativeEventArgs> {\n  numberOfPointers: number;\n  state: State;\n  pointerInside: boolean | undefined;\n  handlerTag: number;\n  target: number;\n  oldState?: State;\n}\n\nexport interface PointerData {\n  id: number;\n  x: number;\n  y: number;\n  absoluteX: number;\n  absoluteY: number;\n}\n\ntype TouchNativeArgs = number | State | TouchEventType | PointerData[];\n\ninterface NativeTouchEvent extends Record<string, TouchNativeArgs> {\n  handlerTag: number;\n  state: State;\n  eventType: TouchEventType;\n  changedTouches: PointerData[];\n  allTouches: PointerData[];\n  numberOfTouches: number;\n}\n\nexport interface ResultEvent extends Record<string, NativeEvent | number> {\n  nativeEvent: NativeEvent;\n  timeStamp: number;\n}\n\nexport interface ResultTouchEvent\n  extends Record<string, NativeTouchEvent | number> {\n  nativeEvent: NativeTouchEvent;\n  timeStamp: number;\n}\n\nexport interface PropsRef {\n  onGestureHandlerEvent: () => void;\n  onGestureHandlerStateChange: () => void;\n}\n\nexport interface AdaptedEvent {\n  x: number;\n  y: number;\n  offsetX: number;\n  offsetY: number;\n  pointerId: number;\n  eventType: EventTypes;\n  pointerType: PointerType;\n  buttons: number;\n  time: number;\n  allTouches?: TouchList;\n  changedTouches?: TouchList;\n  touchEventType?: TouchEventType;\n}\n\nexport enum MouseButtons {\n  NONE,\n  LEFT,\n  RIGHT,\n  LEFT_RIGHT,\n  SCROLL,\n  SCROLL_LEFT,\n  SCROLL_RIGHT,\n  SCROLL_LEFT_RIGHT,\n}\n\nexport enum EventTypes {\n  DOWN,\n  ADDITIONAL_POINTER_DOWN,\n  UP,\n  ADDITIONAL_POINTER_UP,\n  MOVE,\n  ENTER,\n  OUT,\n  CANCEL,\n}\n\nexport enum TouchEventType {\n  UNDETERMINED,\n  DOWN,\n  MOVE,\n  UP,\n  CANCELLED,\n}\n\nexport enum PointerType {\n  NONE = 'none',\n  MOUSE = 'mouse',\n  TOUCH = 'touch',\n  PEN = 'pen',\n}\n"],"mappings":"mJAgIA,GAAY,CAAAA,YAAZ,C,UAAYA,Y,EAAAA,Y,CAAAA,Y,mBAAAA,Y,CAAAA,Y,mBAAAA,Y,CAAAA,Y,qBAAAA,Y,CAAAA,Y,+BAAAA,Y,CAAAA,Y,uBAAAA,Y,CAAAA,Y,iCAAAA,Y,CAAAA,Y,mCAAAA,Y,CAAAA,Y,gDAAAA,Y,wBAAAA,Y,MAWZ,GAAY,CAAAC,UAAZ,C,UAAYA,U,EAAAA,U,CAAAA,U,mBAAAA,U,CAAAA,U,yDAAAA,U,CAAAA,U,eAAAA,U,CAAAA,U,qDAAAA,U,CAAAA,U,mBAAAA,U,CAAAA,U,qBAAAA,U,CAAAA,U,iBAAAA,U,CAAAA,U,0BAAAA,U,sBAAAA,U,MAWZ,GAAY,CAAAC,cAAZ,C,UAAYA,c,EAAAA,c,CAAAA,c,mCAAAA,c,CAAAA,c,mBAAAA,c,CAAAA,c,mBAAAA,c,CAAAA,c,eAAAA,c,CAAAA,c,gCAAAA,c,0BAAAA,c,MAQZ,GAAY,CAAAC,WAAZ,C,UAAYA,W,EAAAA,W,gBAAAA,W,kBAAAA,W,kBAAAA,W,iBAAAA,W,uBAAAA,W"},"metadata":{},"sourceType":"script","externalDependencies":[]}