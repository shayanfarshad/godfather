{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"FontDisplay\",{enumerable:true,get:function get(){return _Font.FontDisplay;}});exports.isLoaded=isLoaded;exports.isLoading=isLoading;exports.loadAsync=loadAsync;exports.processFontFamily=processFontFamily;exports.unloadAllAsync=unloadAllAsync;exports.unloadAsync=unloadAsync;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _expoModulesCore=require(\"expo-modules-core\");var _ExpoFontLoader=_interopRequireDefault(require(\"./ExpoFontLoader\"));var _Font=require(\"./Font.types\");var _FontLoader=require(\"./FontLoader\");var loaded={};var loadPromises={};function processFontFamily(fontFamily){if(!fontFamily||!(0,_FontLoader.fontFamilyNeedsScoping)(fontFamily)){return fontFamily;}if(!isLoaded(fontFamily)){if(__DEV__){if(isLoading(fontFamily)){console.error(\"You started loading the font \\\"\"+fontFamily+\"\\\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.\");}else{console.error(\"fontFamily \\\"\"+fontFamily+\"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");}}return'System';}return\"ExpoFont-\"+(0,_FontLoader.getNativeFontName)(fontFamily);}function isLoaded(fontFamily){return fontFamily in loaded;}function isLoading(fontFamily){return fontFamily in loadPromises;}function loadAsync(fontFamilyOrFontMap,source){var fontMap,names;return _regenerator.default.async(function loadAsync$(_context){while(1)switch(_context.prev=_context.next){case 0:if(!(typeof fontFamilyOrFontMap==='object')){_context.next=8;break;}if(!source){_context.next=3;break;}throw new _expoModulesCore.CodedError(\"ERR_FONT_API\",\"No fontFamily can be used for the provided source: \"+source+\". The second argument of `loadAsync()` can only be used with a `string` value as the first argument.\");case 3:fontMap=fontFamilyOrFontMap;names=Object.keys(fontMap);_context.next=7;return _regenerator.default.awrap(Promise.all(names.map(function(name){return loadFontInNamespaceAsync(name,fontMap[name]);})));case 7:return _context.abrupt(\"return\");case 8:_context.next=10;return _regenerator.default.awrap(loadFontInNamespaceAsync(fontFamilyOrFontMap,source));case 10:return _context.abrupt(\"return\",_context.sent);case 11:case\"end\":return _context.stop();}},null,null,null,Promise);}function loadFontInNamespaceAsync(fontFamily,source){var asset;return _regenerator.default.async(function loadFontInNamespaceAsync$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:if(source){_context3.next=2;break;}throw new _expoModulesCore.CodedError(\"ERR_FONT_SOURCE\",\"Cannot load null or undefined font source: { \\\"\"+fontFamily+\"\\\": \"+source+\" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\"+fontFamily+\"\\\"\");case 2:if(!loaded[fontFamily]){_context3.next=4;break;}return _context3.abrupt(\"return\");case 4:if(!loadPromises.hasOwnProperty(fontFamily)){_context3.next=6;break;}return _context3.abrupt(\"return\",loadPromises[fontFamily]);case 6:asset=(0,_FontLoader.getAssetForSource)(source);loadPromises[fontFamily]=function _callee(){return _regenerator.default.async(function _callee$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return _regenerator.default.awrap((0,_FontLoader.loadSingleFontAsync)(fontFamily,asset));case 3:loaded[fontFamily]=true;case 4:_context2.prev=4;delete loadPromises[fontFamily];return _context2.finish(4);case 7:case\"end\":return _context2.stop();}},null,null,[[0,,4,7]],Promise);}();_context3.next=10;return _regenerator.default.awrap(loadPromises[fontFamily]);case 10:case\"end\":return _context3.stop();}},null,null,null,Promise);}function unloadAllAsync(){var _i,_Object$keys,fontFamily;return _regenerator.default.async(function unloadAllAsync$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:if(_ExpoFontLoader.default.unloadAllAsync){_context4.next=2;break;}throw new _expoModulesCore.UnavailabilityError('expo-font','unloadAllAsync');case 2:if(!Object.keys(loadPromises).length){_context4.next=4;break;}throw new _expoModulesCore.CodedError(\"ERR_UNLOAD\",\"Cannot unload fonts while they're still loading: \"+Object.keys(loadPromises).join(', '));case 4:for(_i=0,_Object$keys=Object.keys(loaded);_i<_Object$keys.length;_i++){fontFamily=_Object$keys[_i];delete loaded[fontFamily];}_context4.next=7;return _regenerator.default.awrap(_ExpoFontLoader.default.unloadAllAsync());case 7:case\"end\":return _context4.stop();}},null,null,null,Promise);}function unloadAsync(fontFamilyOrFontMap,options){var fontMap,names;return _regenerator.default.async(function unloadAsync$(_context5){while(1)switch(_context5.prev=_context5.next){case 0:if(_ExpoFontLoader.default.unloadAsync){_context5.next=2;break;}throw new _expoModulesCore.UnavailabilityError('expo-font','unloadAsync');case 2:if(!(typeof fontFamilyOrFontMap==='object')){_context5.next=10;break;}if(!options){_context5.next=5;break;}throw new _expoModulesCore.CodedError(\"ERR_FONT_API\",\"No fontFamily can be used for the provided options: \"+options+\". The second argument of `unloadAsync()` can only be used with a `string` value as the first argument.\");case 5:fontMap=fontFamilyOrFontMap;names=Object.keys(fontMap);_context5.next=9;return _regenerator.default.awrap(Promise.all(names.map(function(name){return unloadFontInNamespaceAsync(name,fontMap[name]);})));case 9:return _context5.abrupt(\"return\");case 10:_context5.next=12;return _regenerator.default.awrap(unloadFontInNamespaceAsync(fontFamilyOrFontMap,options));case 12:return _context5.abrupt(\"return\",_context5.sent);case 13:case\"end\":return _context5.stop();}},null,null,null,Promise);}function unloadFontInNamespaceAsync(fontFamily,options){var nativeFontName;return _regenerator.default.async(function unloadFontInNamespaceAsync$(_context6){while(1)switch(_context6.prev=_context6.next){case 0:if(loaded[fontFamily]){_context6.next=4;break;}return _context6.abrupt(\"return\");case 4:delete loaded[fontFamily];case 5:nativeFontName=(0,_FontLoader.getNativeFontName)(fontFamily);if(nativeFontName){_context6.next=8;break;}throw new _expoModulesCore.CodedError(\"ERR_FONT_FAMILY\",\"Cannot unload an empty name\");case 8:_context6.next=10;return _regenerator.default.awrap(_ExpoFontLoader.default.unloadAsync(nativeFontName,options));case 10:case\"end\":return _context6.stop();}},null,null,null,Promise);}","map":{"version":3,"names":["_expoModulesCore","require","_ExpoFontLoader","_interopRequireDefault","_Font","_FontLoader","loaded","loadPromises","processFontFamily","fontFamily","fontFamilyNeedsScoping","isLoaded","__DEV__","isLoading","console","error","getNativeFontName","loadAsync","fontFamilyOrFontMap","source","fontMap","names","_regenerator","default","async","loadAsync$","_context","prev","next","CodedError","Object","keys","awrap","Promise","all","map","name","loadFontInNamespaceAsync","abrupt","sent","stop","asset","loadFontInNamespaceAsync$","_context3","hasOwnProperty","getAssetForSource","_callee","_callee$","_context2","loadSingleFontAsync","finish","unloadAllAsync","_i","_Object$keys","unloadAllAsync$","_context4","ExpoFontLoader","UnavailabilityError","length","join","unloadAsync","options","unloadAsync$","_context5","unloadFontInNamespaceAsync","nativeFontName","unloadFontInNamespaceAsync$","_context6"],"sources":["/Users/shayan/workspace/godfather/node_modules/expo-font/src/Font.ts"],"sourcesContent":["import { CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\n// @needsAudit\n// note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n *\n * @param fontFamily Name of font to process.\n * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/archive/managed-vs-bare/).\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  return fontFamily in loaded;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * Highly efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n * style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport async function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}