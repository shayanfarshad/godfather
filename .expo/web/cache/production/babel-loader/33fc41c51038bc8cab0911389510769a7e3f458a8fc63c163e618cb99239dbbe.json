{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.Asset=void 0;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _expoModulesCore=require(\"expo-modules-core\");var _AssetRegistry=require(\"react-native/Libraries/Image/AssetRegistry\");var _AssetSources=require(\"./AssetSources\");var AssetUris=_interopRequireWildcard(require(\"./AssetUris\"));var ImageAssets=_interopRequireWildcard(require(\"./ImageAssets\"));var _LocalAssets=require(\"./LocalAssets\");var _PlatformUtils=require(\"./PlatformUtils\");var _resolveAssetSource2=_interopRequireDefault(require(\"./resolveAssetSource\"));function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}var Asset=exports.Asset=function(){function Asset(_ref){var name=_ref.name,type=_ref.type,_ref$hash=_ref.hash,hash=_ref$hash===void 0?null:_ref$hash,uri=_ref.uri,width=_ref.width,height=_ref.height;(0,_classCallCheck2.default)(this,Asset);this.hash=null;this.localUri=null;this.width=null;this.height=null;this.downloading=false;this.downloaded=false;this._downloadCallbacks=[];this.name=name;this.type=type;this.hash=hash;this.uri=uri;if(typeof width==='number'){this.width=width;}if(typeof height==='number'){this.height=height;}if(hash){this.localUri=(0,_LocalAssets.getLocalAssetUri)(hash,type);if(this.localUri){this.downloaded=true;}}if(_expoModulesCore.Platform.OS==='web'){if(!name){this.name=AssetUris.getFilename(uri);}if(!type){this.type=AssetUris.getFileExtension(uri);}}}(0,_createClass2.default)(Asset,[{key:\"downloadAsync\",value:function downloadAsync(){var _this=this;var _await$ImageAssets$ge,width,height,name;return _regenerator.default.async(function downloadAsync$(_context){while(1)switch(_context.prev=_context.next){case 0:if(!this.downloaded){_context.next=2;break;}return _context.abrupt(\"return\",this);case 2:if(!this.downloading){_context.next=6;break;}_context.next=5;return _regenerator.default.awrap(new Promise(function(resolve,reject){_this._downloadCallbacks.push({resolve:resolve,reject:reject});}));case 5:return _context.abrupt(\"return\",this);case 6:this.downloading=true;_context.prev=7;if(!(_expoModulesCore.Platform.OS==='web')){_context.next=22;break;}if(!ImageAssets.isImageType(this.type)){_context.next=21;break;}_context.next=12;return _regenerator.default.awrap(ImageAssets.getImageInfoAsync(this.uri));case 12:_await$ImageAssets$ge=_context.sent;width=_await$ImageAssets$ge.width;height=_await$ImageAssets$ge.height;name=_await$ImageAssets$ge.name;this.width=width;this.height=height;this.name=name;_context.next=22;break;case 21:this.name=AssetUris.getFilename(this.uri);case 22:_context.next=24;return _regenerator.default.awrap((0,_PlatformUtils.downloadAsync)(this.uri,this.hash,this.type,this.name));case 24:this.localUri=_context.sent;this.downloaded=true;this._downloadCallbacks.forEach(function(_ref2){var resolve=_ref2.resolve;return resolve();});_context.next=33;break;case 29:_context.prev=29;_context.t0=_context[\"catch\"](7);this._downloadCallbacks.forEach(function(_ref3){var reject=_ref3.reject;return reject(_context.t0);});throw _context.t0;case 33:_context.prev=33;this.downloading=false;this._downloadCallbacks=[];return _context.finish(33);case 37:return _context.abrupt(\"return\",this);case 38:case\"end\":return _context.stop();}},null,this,[[7,29,33,37]],Promise);}}],[{key:\"loadAsync\",value:function loadAsync(moduleId){var moduleIds=Array.isArray(moduleId)?moduleId:[moduleId];return Promise.all(moduleIds.map(function(moduleId){return Asset.fromModule(moduleId).downloadAsync();}));}},{key:\"fromModule\",value:function fromModule(virtualAssetModule){if(typeof virtualAssetModule==='string'){return Asset.fromURI(virtualAssetModule);}var meta=(0,_AssetRegistry.getAssetByID)(virtualAssetModule);if(!meta){throw new Error(\"Module \\\"\"+virtualAssetModule+\"\\\" is missing from the asset registry\");}if(!_PlatformUtils.IS_ENV_WITH_UPDATES_ENABLED){var _resolveAssetSource=(0,_resolveAssetSource2.default)(virtualAssetModule),uri=_resolveAssetSource.uri;var asset=new Asset({name:meta.name,type:meta.type,hash:meta.hash,uri:uri,width:meta.width,height:meta.height});if(_expoModulesCore.Platform.OS==='android'&&!uri.includes(':')&&(meta.width||meta.height)){asset.localUri=asset.uri;asset.downloaded=true;}Asset.byHash[meta.hash]=asset;return asset;}return Asset.fromMetadata(meta);}},{key:\"fromMetadata\",value:function fromMetadata(meta){var metaHash=meta.hash;if(Asset.byHash[metaHash]){return Asset.byHash[metaHash];}var _selectAssetSource=(0,_AssetSources.selectAssetSource)(meta),uri=_selectAssetSource.uri,hash=_selectAssetSource.hash;var asset=new Asset({name:meta.name,type:meta.type,hash:hash,uri:uri,width:meta.width,height:meta.height});Asset.byHash[metaHash]=asset;return asset;}},{key:\"fromURI\",value:function fromURI(uri){if(Asset.byUri[uri]){return Asset.byUri[uri];}var type='';if(uri.indexOf(';base64')>-1){type=uri.split(';')[0].split('/')[1];}else{var extension=AssetUris.getFileExtension(uri);type=extension.startsWith('.')?extension.substring(1):extension;}var asset=new Asset({name:'',type:type,hash:null,uri:uri});Asset.byUri[uri]=asset;return asset;}}]);return Asset;}();Asset.byHash={};Asset.byUri={};","map":{"version":3,"names":["_expoModulesCore","require","_AssetRegistry","_AssetSources","AssetUris","_interopRequireWildcard","ImageAssets","_LocalAssets","_PlatformUtils","_resolveAssetSource2","_interopRequireDefault","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","Asset","exports","_ref","name","type","_ref$hash","hash","uri","width","height","_classCallCheck2","localUri","downloading","downloaded","_downloadCallbacks","getLocalAssetUri","Platform","OS","getFilename","getFileExtension","_createClass2","key","value","downloadAsync","_this","_await$ImageAssets$ge","_regenerator","async","downloadAsync$","_context","prev","next","abrupt","awrap","Promise","resolve","reject","push","isImageType","getImageInfoAsync","sent","forEach","_ref2","t0","_ref3","finish","stop","loadAsync","moduleId","moduleIds","Array","isArray","all","map","fromModule","virtualAssetModule","fromURI","meta","getAssetByID","Error","IS_ENV_WITH_UPDATES_ENABLED","_resolveAssetSource","resolveAssetSource","asset","includes","byHash","fromMetadata","metaHash","_selectAssetSource","selectAssetSource","byUri","indexOf","split","extension","startsWith","substring"],"sources":["/Users/shayan/workspace/godfather/node_modules/expo-asset/src/Asset.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport { getAssetByID } from 'react-native/Libraries/Image/AssetRegistry';\n\nimport { AssetMetadata, selectAssetSource } from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport * as ImageAssets from './ImageAssets';\nimport { getLocalAssetUri } from './LocalAssets';\nimport { downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from './PlatformUtils';\nimport resolveAssetSource from './resolveAssetSource';\n\n// @docsMissing\nexport type AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport { AssetMetadata };\n\n// @needsAudit\n/**\n * The `Asset` class represents an asset in your app. It gives metadata about the asset (such as its\n * name and type) and provides facilities to load the asset data.\n */\nexport class Asset {\n  /**\n   * @private\n   */\n  static byHash = {};\n  /**\n   * @private\n   */\n  static byUri = {};\n\n  /**\n   * The name of the asset file without the extension. Also without the part from `@` onward in the\n   * filename (used to specify scale factor for images).\n   */\n  name: string;\n  /**\n   * The extension of the asset filename.\n   */\n  type: string;\n  /**\n   * The MD5 hash of the asset's data.\n   */\n  hash: string | null = null;\n  /**\n   * A URI that points to the asset's data on the remote server. When running the published version\n   * of your app, this refers to the location on Expo's asset server where Expo has stored your\n   * asset. When running the app from Expo CLI during development, this URI points to Expo CLI's\n   * server running on your computer and the asset is served directly from your computer. If you\n   * are not using Classic Updates (legacy), this field should be ignored as we ensure your assets\n   * are on device before before running your application logic.\n   */\n  uri: string;\n  /**\n   * If the asset has been downloaded (by calling [`downloadAsync()`](#downloadasync)), the\n   * `file://` URI pointing to the local file on the device that contains the asset data.\n   */\n  localUri: string | null = null;\n  /**\n   * If the asset is an image, the width of the image data divided by the scale factor. The scale\n   * factor is the number after `@` in the filename, or `1` if not present.\n   */\n  width: number | null = null;\n  /**\n   * If the asset is an image, the height of the image data divided by the scale factor. The scale factor is the number after `@` in the filename, or `1` if not present.\n   */\n  height: number | null = null;\n  // @docsMissing\n  downloading: boolean = false;\n  // @docsMissing\n  downloaded: boolean = false;\n\n  /**\n   * @private\n   */\n  _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (hash) {\n      this.localUri = getLocalAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  // @needsAudit\n  /**\n   * A helper that wraps `Asset.fromModule(module).downloadAsync` for convenience.\n   * @param moduleId An array of `require('path/to/file')` or external network URLs. Can also be\n   * just one module or URL without an Array.\n   * @return Returns a Promise that fulfills with an array of `Asset`s when the asset(s) has been\n   * saved to disk.\n   * @example\n   * ```ts\n   * const [{ localUri }] = await Asset.loadAsync(require('./assets/snack-icon.png'));\n   * ```\n   */\n  static loadAsync(moduleId: number | number[] | string | string[]): Promise<Asset[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map((moduleId) => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  // @needsAudit\n  /**\n   * Returns the [`Asset`](#asset) instance representing an asset given its module or URL.\n   * @param virtualAssetModule The value of `require('path/to/file')` for the asset or external\n   * network URL\n   * @return The [`Asset`](#asset) instance for the asset.\n   */\n  static fromModule(virtualAssetModule: number | string): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_ENV_WITH_UPDATES_ENABLED) {\n      const { uri } = resolveAssetSource(virtualAssetModule);\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  // @docsMissing\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    }\n\n    const { uri, hash } = selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  // @docsMissing\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  // @needsAudit\n  /**\n   * Downloads the asset data to a local file in the device's cache directory. Once the returned\n   * promise is fulfilled without error, the [`localUri`](#assetlocaluri) field of this asset points\n   * to a local file containing the asset data. The asset is only downloaded if an up-to-date local\n   * file for the asset isn't already present due to an earlier download. The downloaded `Asset`\n   * will be returned when the promise is resolved.\n   * @return Returns a Promise which fulfills with an `Asset` instance.\n   */\n  async downloadAsync(): Promise<this> {\n    if (this.downloaded) {\n      return this;\n    }\n    if (this.downloading) {\n      await new Promise<void>((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return this;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        if (ImageAssets.isImageType(this.type)) {\n          const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n          this.width = width;\n          this.height = height;\n          this.name = name;\n        } else {\n          this.name = AssetUris.getFilename(this.uri);\n        }\n      }\n      this.localUri = await downloadAsync(this.uri, this.hash, this.type, this.name);\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n    return this;\n  }\n}\n"],"mappings":"saAAA,IAAAA,gBAAA,CAAAC,OAAA,sBACA,IAAAC,cAAA,CAAAD,OAAA,+CAEA,IAAAE,aAAA,CAAAF,OAAA,mBACA,IAAAG,SAAA,CAAAC,uBAAA,CAAAJ,OAAA,iBACA,IAAAK,WAAA,CAAAD,uBAAA,CAAAJ,OAAA,mBACA,IAAAM,YAAA,CAAAN,OAAA,kBACA,IAAAO,cAAA,CAAAP,OAAA,oBACA,IAAAQ,oBAAA,CAAAC,sBAAA,CAAAT,OAAA,0BAAsD,SAAAU,yBAAAC,CAAA,wBAAAC,OAAA,iBAAAC,CAAA,KAAAD,OAAA,GAAAE,CAAA,KAAAF,OAAA,UAAAF,wBAAA,UAAAA,yBAAAC,CAAA,SAAAA,CAAA,CAAAG,CAAA,CAAAD,CAAA,IAAAF,CAAA,YAAAP,wBAAAO,CAAA,CAAAE,CAAA,MAAAA,CAAA,EAAAF,CAAA,EAAAA,CAAA,CAAAI,UAAA,QAAAJ,CAAA,WAAAA,CAAA,mBAAAA,CAAA,qBAAAA,CAAA,QAAAK,OAAA,CAAAL,CAAA,MAAAG,CAAA,CAAAJ,wBAAA,CAAAG,CAAA,KAAAC,CAAA,EAAAA,CAAA,CAAAG,GAAA,CAAAN,CAAA,SAAAG,CAAA,CAAAI,GAAA,CAAAP,CAAA,MAAAQ,CAAA,EAAAC,SAAA,OAAAC,CAAA,CAAAC,MAAA,CAAAC,cAAA,EAAAD,MAAA,CAAAE,wBAAA,SAAAC,CAAA,IAAAd,CAAA,gBAAAc,CAAA,EAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAjB,CAAA,CAAAc,CAAA,OAAAI,CAAA,CAAAR,CAAA,CAAAC,MAAA,CAAAE,wBAAA,CAAAb,CAAA,CAAAc,CAAA,OAAAI,CAAA,GAAAA,CAAA,CAAAX,GAAA,EAAAW,CAAA,CAAAC,GAAA,EAAAR,MAAA,CAAAC,cAAA,CAAAJ,CAAA,CAAAM,CAAA,CAAAI,CAAA,EAAAV,CAAA,CAAAM,CAAA,EAAAd,CAAA,CAAAc,CAAA,UAAAN,CAAA,CAAAH,OAAA,CAAAL,CAAA,CAAAG,CAAA,EAAAA,CAAA,CAAAgB,GAAA,CAAAnB,CAAA,CAAAQ,CAAA,EAAAA,CAAA,KAwBzC,CAAAY,KAAK,CAAAC,OAAA,CAAAD,KAAA,YAwDhB,SAAAA,MAAAE,IAAA,CAA4E,IAA9D,CAAAC,IAAI,CAAAD,IAAA,CAAJC,IAAI,CAAEC,IAAI,CAAAF,IAAA,CAAJE,IAAI,CAAAC,SAAA,CAAAH,IAAA,CAAEI,IAAI,CAAJA,IAAI,CAAAD,SAAA,UAAG,IAAI,CAAAA,SAAA,CAAEE,GAAG,CAAAL,IAAA,CAAHK,GAAG,CAAEC,KAAK,CAAAN,IAAA,CAALM,KAAK,CAAEC,MAAM,CAAAP,IAAA,CAANO,MAAM,IAAAC,gBAAA,CAAAzB,OAAA,OAAAe,KAAA,OAlCzDM,IAAI,CAAkB,IAAI,MAc1BK,QAAQ,CAAkB,IAAI,MAK9BH,KAAK,CAAkB,IAAI,MAI3BC,MAAM,CAAkB,IAAI,MAE5BG,WAAW,CAAY,KAAK,MAE5BC,UAAU,CAAY,KAAK,MAK3BC,kBAAkB,CAA+B,EAAE,CAGjD,IAAI,CAACX,IAAI,CAAGA,IAAI,CAChB,IAAI,CAACC,IAAI,CAAGA,IAAI,CAChB,IAAI,CAACE,IAAI,CAAGA,IAAI,CAChB,IAAI,CAACC,GAAG,CAAGA,GAAG,CAEd,GAAI,MAAO,CAAAC,KAAK,GAAK,QAAQ,CAAE,CAC7B,IAAI,CAACA,KAAK,CAAGA,KAAK,C,CAEpB,GAAI,MAAO,CAAAC,MAAM,GAAK,QAAQ,CAAE,CAC9B,IAAI,CAACA,MAAM,CAAGA,MAAM,C,CAGtB,GAAIH,IAAI,CAAE,CACR,IAAI,CAACK,QAAQ,CAAG,GAAAI,6BAAgB,EAACT,IAAI,CAAEF,IAAI,CAAC,CAC5C,GAAI,IAAI,CAACO,QAAQ,CAAE,CACjB,IAAI,CAACE,UAAU,CAAG,IAAI,C,EAI1B,GAAIG,yBAAQ,CAACC,EAAE,GAAK,KAAK,CAAE,CACzB,GAAI,CAACd,IAAI,CAAE,CACT,IAAI,CAACA,IAAI,CAAG/B,SAAS,CAAC8C,WAAW,CAACX,GAAG,CAAC,C,CAExC,GAAI,CAACH,IAAI,CAAE,CACT,IAAI,CAACA,IAAI,CAAGhC,SAAS,CAAC+C,gBAAgB,CAACZ,GAAG,CAAC,C,EAGjD,CAAC,GAAAa,aAAA,CAAAnC,OAAA,EAAAe,KAAA,GAAAqB,GAAA,iBAAAC,KAAA,CA2HD,SAAAC,cAAA,MAAAC,KAAA,UAAAC,qBAAA,CAAAjB,KAAA,CAAAC,MAAA,CAAAN,IAAA,QAAAuB,YAAA,CAAAzC,OAAA,CAAA0C,KAAA,UAAAC,eAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,aACM,IAAI,CAAClB,UAAU,EAAAgB,QAAA,CAAAE,IAAA,iBAAAF,QAAA,CAAAG,MAAA,UACV,IAAI,aAET,IAAI,CAACpB,WAAW,EAAAiB,QAAA,CAAAE,IAAA,UAAAF,QAAA,CAAAE,IAAA,UAAAL,YAAA,CAAAzC,OAAA,CAAAgD,KAAA,CACZ,GAAI,CAAAC,OAAO,CAAO,SAACC,OAAO,CAAEC,MAAM,CAAI,CAC1CZ,KAAI,CAACV,kBAAkB,CAACuB,IAAI,CAAC,CAAEF,OAAO,CAAPA,OAAO,CAAEC,MAAM,CAANA,MAAM,CAAE,CAAC,CACnD,CAAC,CAAC,gBAAAP,QAAA,CAAAG,MAAA,UACK,IAAI,SAEb,IAAI,CAACpB,WAAW,CAAG,IAAI,CAACiB,QAAA,CAAAC,IAAA,QAGlBd,yBAAQ,CAACC,EAAE,GAAK,KAAK,GAAAY,QAAA,CAAAE,IAAA,eACnBzD,WAAW,CAACgE,WAAW,CAAC,IAAI,CAAClC,IAAI,CAAC,EAAAyB,QAAA,CAAAE,IAAA,WAAAF,QAAA,CAAAE,IAAA,WAAAL,YAAA,CAAAzC,OAAA,CAAAgD,KAAA,CACE3D,WAAW,CAACiE,iBAAiB,CAAC,IAAI,CAAChC,GAAG,CAAC,UAAAkB,qBAAA,CAAAI,QAAA,CAAAW,IAAA,CAArEhC,KAAK,CAAAiB,qBAAA,CAALjB,KAAK,CAAEC,MAAM,CAAAgB,qBAAA,CAANhB,MAAM,CAAEN,IAAI,CAAAsB,qBAAA,CAAJtB,IAAI,CAC3B,IAAI,CAACK,KAAK,CAAGA,KAAK,CAClB,IAAI,CAACC,MAAM,CAAGA,MAAM,CACpB,IAAI,CAACN,IAAI,CAAGA,IAAI,CAAC0B,QAAA,CAAAE,IAAA,kBAEjB,IAAI,CAAC5B,IAAI,CAAG/B,SAAS,CAAC8C,WAAW,CAAC,IAAI,CAACX,GAAG,CAAC,CAAC,QAAAsB,QAAA,CAAAE,IAAA,WAAAL,YAAA,CAAAzC,OAAA,CAAAgD,KAAA,CAG1B,GAAAV,4BAAa,EAAC,IAAI,CAAChB,GAAG,CAAE,IAAI,CAACD,IAAI,CAAE,IAAI,CAACF,IAAI,CAAE,IAAI,CAACD,IAAI,CAAC,UAA9E,IAAI,CAACQ,QAAQ,CAAAkB,QAAA,CAAAW,IAAA,CAEb,IAAI,CAAC3B,UAAU,CAAG,IAAI,CACtB,IAAI,CAACC,kBAAkB,CAAC2B,OAAO,CAAC,SAAAC,KAAA,KAAG,CAAAP,OAAO,CAAAO,KAAA,CAAPP,OAAO,OAAO,CAAAA,OAAO,EAAE,GAAC,CAACN,QAAA,CAAAE,IAAA,kBAAAF,QAAA,CAAAC,IAAA,IAAAD,QAAA,CAAAc,EAAA,CAAAd,QAAA,aAE5D,IAAI,CAACf,kBAAkB,CAAC2B,OAAO,CAAC,SAAAG,KAAA,KAAG,CAAAR,MAAM,CAAAQ,KAAA,CAANR,MAAM,OAAO,CAAAA,MAAM,CAAAP,QAAA,CAAAc,EAAE,CAAC,GAAC,CAAC,MAAAd,QAAA,CAAAc,EAAA,SAAAd,QAAA,CAAAC,IAAA,IAG3D,IAAI,CAAClB,WAAW,CAAG,KAAK,CACxB,IAAI,CAACE,kBAAkB,CAAG,EAAE,CAAC,OAAAe,QAAA,CAAAgB,MAAA,oBAAAhB,QAAA,CAAAG,MAAA,UAExB,IAAI,2BAAAH,QAAA,CAAAiB,IAAA,+BAAAZ,OAAA,GACZ,KAAAb,GAAA,aAAAC,KAAA,CAhJD,SAAAyB,UAAiBC,QAA+C,EAC9D,GAAM,CAAAC,SAAS,CAAGC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,CAAGA,QAAQ,CAAG,CAACA,QAAQ,CAAC,CACjE,MAAO,CAAAd,OAAO,CAACkB,GAAG,CAACH,SAAS,CAACI,GAAG,CAAC,SAACL,QAAQ,QAAK,CAAAhD,KAAK,CAACsD,UAAU,CAACN,QAAQ,CAAC,CAACzB,aAAa,EAAE,GAAC,CAAC,CAC7F,CAAC,GAAAF,GAAA,cAAAC,KAAA,CASD,SAAAgC,WAAkBC,kBAAmC,EACnD,GAAI,MAAO,CAAAA,kBAAkB,GAAK,QAAQ,CAAE,CAC1C,MAAO,CAAAvD,KAAK,CAACwD,OAAO,CAACD,kBAAkB,CAAC,C,CAG1C,GAAM,CAAAE,IAAI,CAAG,GAAAC,2BAAY,EAACH,kBAAkB,CAAC,CAC7C,GAAI,CAACE,IAAI,CAAE,CACT,KAAM,IAAI,CAAAE,KAAK,aAAYJ,kBAAkB,wCAAsC,CAAC,C,CAKtF,GAAI,CAACK,0CAA2B,CAAE,CAChC,IAAAC,mBAAA,CAAgB,GAAAC,4BAAkB,EAACP,kBAAkB,CAAC,CAA9ChD,GAAG,CAAAsD,mBAAA,CAAHtD,GAAG,CACX,GAAM,CAAAwD,KAAK,CAAG,GAAI,CAAA/D,KAAK,CAAC,CACtBG,IAAI,CAAEsD,IAAI,CAACtD,IAAI,CACfC,IAAI,CAAEqD,IAAI,CAACrD,IAAI,CACfE,IAAI,CAAEmD,IAAI,CAACnD,IAAI,CACfC,GAAG,CAAHA,GAAG,CACHC,KAAK,CAAEiD,IAAI,CAACjD,KAAK,CACjBC,MAAM,CAAEgD,IAAI,CAAChD,M,CACd,CAAC,CAMF,GAAIO,yBAAQ,CAACC,EAAE,GAAK,SAAS,EAAI,CAACV,GAAG,CAACyD,QAAQ,CAAC,GAAG,CAAC,GAAKP,IAAI,CAACjD,KAAK,EAAIiD,IAAI,CAAChD,MAAM,CAAC,CAAE,CAClFsD,KAAK,CAACpD,QAAQ,CAAGoD,KAAK,CAACxD,GAAG,CAC1BwD,KAAK,CAAClD,UAAU,CAAG,IAAI,C,CAGzBb,KAAK,CAACiE,MAAM,CAACR,IAAI,CAACnD,IAAI,CAAC,CAAGyD,KAAK,CAC/B,MAAO,CAAAA,KAAK,C,CAGd,MAAO,CAAA/D,KAAK,CAACkE,YAAY,CAACT,IAAI,CAAC,CACjC,CAAC,GAAApC,GAAA,gBAAAC,KAAA,CAGD,SAAA4C,aAAoBT,IAAmB,EAGrC,GAAM,CAAAU,QAAQ,CAAGV,IAAI,CAACnD,IAAI,CAC1B,GAAIN,KAAK,CAACiE,MAAM,CAACE,QAAQ,CAAC,CAAE,CAC1B,MAAO,CAAAnE,KAAK,CAACiE,MAAM,CAACE,QAAQ,CAAC,C,CAG/B,IAAAC,kBAAA,CAAsB,GAAAC,+BAAiB,EAACZ,IAAI,CAAC,CAArClD,GAAG,CAAA6D,kBAAA,CAAH7D,GAAG,CAAED,IAAI,CAAA8D,kBAAA,CAAJ9D,IAAI,CACjB,GAAM,CAAAyD,KAAK,CAAG,GAAI,CAAA/D,KAAK,CAAC,CACtBG,IAAI,CAAEsD,IAAI,CAACtD,IAAI,CACfC,IAAI,CAAEqD,IAAI,CAACrD,IAAI,CACfE,IAAI,CAAJA,IAAI,CACJC,GAAG,CAAHA,GAAG,CACHC,KAAK,CAAEiD,IAAI,CAACjD,KAAK,CACjBC,MAAM,CAAEgD,IAAI,CAAChD,M,CACd,CAAC,CACFT,KAAK,CAACiE,MAAM,CAACE,QAAQ,CAAC,CAAGJ,KAAK,CAC9B,MAAO,CAAAA,KAAK,CACd,CAAC,GAAA1C,GAAA,WAAAC,KAAA,CAGD,SAAAkC,QAAejD,GAAW,EACxB,GAAIP,KAAK,CAACsE,KAAK,CAAC/D,GAAG,CAAC,CAAE,CACpB,MAAO,CAAAP,KAAK,CAACsE,KAAK,CAAC/D,GAAG,CAAC,C,CAIzB,GAAI,CAAAH,IAAI,CAAG,EAAE,CACb,GAAIG,GAAG,CAACgE,OAAO,CAAC,SAAS,CAAC,CAAG,CAAC,CAAC,CAAE,CAC/BnE,IAAI,CAAGG,GAAG,CAACiE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,C,CACvC,IAAM,CACL,GAAM,CAAAC,SAAS,CAAGrG,SAAS,CAAC+C,gBAAgB,CAACZ,GAAG,CAAC,CACjDH,IAAI,CAAGqE,SAAS,CAACC,UAAU,CAAC,GAAG,CAAC,CAAGD,SAAS,CAACE,SAAS,CAAC,CAAC,CAAC,CAAGF,SAAS,C,CAGvE,GAAM,CAAAV,KAAK,CAAG,GAAI,CAAA/D,KAAK,CAAC,CACtBG,IAAI,CAAE,EAAE,CACRC,IAAI,CAAJA,IAAI,CACJE,IAAI,CAAE,IAAI,CACVC,GAAG,CAAHA,G,CACD,CAAC,CAEFP,KAAK,CAACsE,KAAK,CAAC/D,GAAG,CAAC,CAAGwD,KAAK,CAExB,MAAO,CAAAA,KAAK,CACd,CAAC,WAAA/D,KAAA,KApMUA,KAAK,CAITiE,MAAM,CAAG,EAAE,CAJPjE,KAAK,CAQTsE,KAAK,CAAG,EAAE"},"metadata":{},"sourceType":"script","externalDependencies":[]}