{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=createHandler;var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _assertThisInitialized2=_interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _defineProperty3=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _isEqual=_interopRequireDefault(require(\"lodash/isEqual\"));var _RNGestureHandlerModule=_interopRequireDefault(require(\"../RNGestureHandlerModule\"));var _State=require(\"../State\");var _handlersRegistry=require(\"./handlersRegistry\");var _gestureHandlerCommon=require(\"./gestureHandlerCommon\");var _utils=require(\"../utils\");var _ActionType=require(\"../ActionType\");var _PressabilityDebugView=require(\"./PressabilityDebugView\");var _GestureHandlerRootViewContext=_interopRequireDefault(require(\"../GestureHandlerRootViewContext\"));var _ghQueueMicrotask=require(\"../ghQueueMicrotask\");function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2.default)(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2.default)(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2.default)(this,result);};}function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));}catch(t){}return(_isNativeReflectConstruct=function _isNativeReflectConstruct(){return!!t;})();}var _UIManagerAny$getView,_UIManagerAny$getView2,_UIManagerAny$getCons;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var UIManagerAny=_reactNative.UIManager;var customGHEventsConfigFabricAndroid={topOnGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},topOnGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}};var customGHEventsConfig=(0,_extends2.default)({onGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},onGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}},(0,_utils.isFabric)()&&_reactNative.Platform.OS==='android'&&customGHEventsConfigFabricAndroid);UIManagerAny.genericDirectEventTypes=(0,_extends2.default)({},UIManagerAny.genericDirectEventTypes,customGHEventsConfig);var UIManagerConstants=(_UIManagerAny$getView=(_UIManagerAny$getView2=UIManagerAny.getViewManagerConfig)===null||_UIManagerAny$getView2===void 0?void 0:_UIManagerAny$getView2.call(UIManagerAny,'getConstants'))!==null&&_UIManagerAny$getView!==void 0?_UIManagerAny$getView:(_UIManagerAny$getCons=UIManagerAny.getConstants)===null||_UIManagerAny$getCons===void 0?void 0:_UIManagerAny$getCons.call(UIManagerAny);if(UIManagerConstants){UIManagerConstants.genericDirectEventTypes=(0,_extends2.default)({},UIManagerConstants.genericDirectEventTypes,customGHEventsConfig);}var _UIManagerAny$setJSRe=UIManagerAny.setJSResponder,oldSetJSResponder=_UIManagerAny$setJSRe===void 0?function(){}:_UIManagerAny$setJSRe,_UIManagerAny$clearJS=UIManagerAny.clearJSResponder,oldClearJSResponder=_UIManagerAny$clearJS===void 0?function(){}:_UIManagerAny$clearJS;UIManagerAny.setJSResponder=function(tag,blockNativeResponder){_RNGestureHandlerModule.default.handleSetJSResponder(tag,blockNativeResponder);oldSetJSResponder(tag,blockNativeResponder);};UIManagerAny.clearJSResponder=function(){_RNGestureHandlerModule.default.handleClearJSResponder();oldClearJSResponder();};var allowTouches=true;var DEV_ON_ANDROID=__DEV__&&_reactNative.Platform.OS==='android';if(DEV_ON_ANDROID){_reactNative.DeviceEventEmitter.addListener('toggleElementInspector',function(){allowTouches=!allowTouches;});}function hasUnresolvedRefs(props){var extract=function extract(refs){if(!Array.isArray(refs)){return refs&&refs.current===null;}return refs.some(function(r){return r&&r.current===null;});};return extract(props['simultaneousHandlers'])||extract(props['waitFor']);}var stateToPropMappings=(0,_defineProperty3.default)((0,_defineProperty3.default)((0,_defineProperty3.default)((0,_defineProperty3.default)((0,_defineProperty3.default)((0,_defineProperty3.default)({},_State.State.UNDETERMINED,undefined),_State.State.BEGAN,'onBegan'),_State.State.FAILED,'onFailed'),_State.State.CANCELLED,'onCancelled'),_State.State.ACTIVE,'onActivated'),_State.State.END,'onEnded');var UNRESOLVED_REFS_RETRY_LIMIT=1;function createHandler(_ref){var name=_ref.name,_ref$allowedProps=_ref.allowedProps,allowedProps=_ref$allowedProps===void 0?[]:_ref$allowedProps,_ref$config=_ref.config,config=_ref$config===void 0?{}:_ref$config,transformProps=_ref.transformProps,_ref$customNativeProp=_ref.customNativeProps,customNativeProps=_ref$customNativeProp===void 0?[]:_ref$customNativeProp;var Handler=function(_React$Component){(0,_inherits2.default)(Handler,_React$Component);var _super=_createSuper(Handler);function Handler(props){var _this;(0,_classCallCheck2.default)(this,Handler);_this=_super.call(this,props);_defineProperty((0,_assertThisInitialized2.default)(_this),\"handlerTag\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"config\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"propsRef\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"isMountedRef\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"viewNode\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"viewTag\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"inspectorToggleListener\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"onGestureHandlerEvent\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){if(typeof _this.props.onGestureEvent==='function'){var _this$props$onGesture,_this$props;(_this$props$onGesture=(_this$props=_this.props).onGestureEvent)===null||_this$props$onGesture===void 0?void 0:_this$props$onGesture.call(_this$props,event);}}else{var _this$props$onGesture2,_this$props2;(_this$props$onGesture2=(_this$props2=_this.props).onGestureHandlerEvent)===null||_this$props$onGesture2===void 0?void 0:_this$props$onGesture2.call(_this$props2,event);}});_defineProperty((0,_assertThisInitialized2.default)(_this),\"onGestureHandlerStateChange\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){if(typeof _this.props.onHandlerStateChange==='function'){var _this$props$onHandler,_this$props3;(_this$props$onHandler=(_this$props3=_this.props).onHandlerStateChange)===null||_this$props$onHandler===void 0?void 0:_this$props$onHandler.call(_this$props3,event);}var state=event.nativeEvent.state;var stateEventName=stateToPropMappings[state];var eventHandler=stateEventName&&_this.props[stateEventName];if(eventHandler&&typeof eventHandler==='function'){eventHandler(event);}}else{var _this$props$onGesture3,_this$props4;(_this$props$onGesture3=(_this$props4=_this.props).onGestureHandlerStateChange)===null||_this$props$onGesture3===void 0?void 0:_this$props$onGesture3.call(_this$props4,event);}});_defineProperty((0,_assertThisInitialized2.default)(_this),\"refHandler\",function(node){_this.viewNode=node;var child=React.Children.only(_this.props.children);var ref=child.ref;if(ref!==null){if(typeof ref==='function'){ref(node);}else{ref.current=node;}}});_defineProperty((0,_assertThisInitialized2.default)(_this),\"createGestureHandler\",function(newConfig){_this.config=newConfig;_RNGestureHandlerModule.default.createGestureHandler(name,_this.handlerTag,newConfig);});_defineProperty((0,_assertThisInitialized2.default)(_this),\"attachGestureHandler\",function(newViewTag){_this.viewTag=newViewTag;if(_reactNative.Platform.OS==='web'){_RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag,newViewTag,_ActionType.ActionType.JS_FUNCTION_OLD_API,_this.propsRef);}else{(0,_handlersRegistry.registerOldGestureHandler)(_this.handlerTag,{onGestureEvent:_this.onGestureHandlerEvent,onGestureStateChange:_this.onGestureHandlerStateChange});var actionType=function(){var _this$props5,_this$props6,_this$props7;if((_this$props5=_this.props)!==null&&_this$props5!==void 0&&_this$props5.onGestureEvent&&'current'in _this.props.onGestureEvent||(_this$props6=_this.props)!==null&&_this$props6!==void 0&&_this$props6.onHandlerStateChange&&'current'in _this.props.onHandlerStateChange){return _ActionType.ActionType.REANIMATED_WORKLET;}else if((_this$props7=_this.props)!==null&&_this$props7!==void 0&&_this$props7.onGestureEvent&&'__isNative'in _this.props.onGestureEvent){return _ActionType.ActionType.NATIVE_ANIMATED_EVENT;}else{return _ActionType.ActionType.JS_FUNCTION_OLD_API;}}();_RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag,newViewTag,actionType);}(0,_gestureHandlerCommon.scheduleFlushOperations)();});_defineProperty((0,_assertThisInitialized2.default)(_this),\"updateGestureHandler\",function(newConfig){_this.config=newConfig;_RNGestureHandlerModule.default.updateGestureHandler(_this.handlerTag,newConfig);(0,_gestureHandlerCommon.scheduleFlushOperations)();});_this.handlerTag=(0,_handlersRegistry.getNextHandlerTag)();_this.config={};_this.propsRef=React.createRef();_this.isMountedRef=React.createRef();_this.state={allowTouches:allowTouches};if(props.id){if(_handlersRegistry.handlerIDToTag[props.id]!==undefined){throw new Error(\"Handler with ID \\\"\"+props.id+\"\\\" already registered\");}_handlersRegistry.handlerIDToTag[props.id]=_this.handlerTag;}return _this;}(0,_createClass2.default)(Handler,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var props=this.props;this.isMountedRef.current=true;if(DEV_ON_ANDROID){this.inspectorToggleListener=_reactNative.DeviceEventEmitter.addListener('toggleElementInspector',function(){_this2.setState(function(_){return{allowTouches:allowTouches};});_this2.update(UNRESOLVED_REFS_RETRY_LIMIT);});}if(hasUnresolvedRefs(props)){(0,_ghQueueMicrotask.ghQueueMicrotask)(function(){_this2.update(UNRESOLVED_REFS_RETRY_LIMIT);});}this.createGestureHandler((0,_gestureHandlerCommon.filterConfig)(transformProps?transformProps(this.props):this.props,[].concat((0,_toConsumableArray2.default)(allowedProps),(0,_toConsumableArray2.default)(customNativeProps)),config));this.attachGestureHandler((0,_gestureHandlerCommon.findNodeHandle)(this.viewNode));}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){var viewTag=(0,_gestureHandlerCommon.findNodeHandle)(this.viewNode);if(this.viewTag!==viewTag){this.attachGestureHandler(viewTag);}this.update(UNRESOLVED_REFS_RETRY_LIMIT);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){var _this$inspectorToggle;(_this$inspectorToggle=this.inspectorToggleListener)===null||_this$inspectorToggle===void 0?void 0:_this$inspectorToggle.remove();this.isMountedRef.current=false;_RNGestureHandlerModule.default.dropGestureHandler(this.handlerTag);(0,_gestureHandlerCommon.scheduleFlushOperations)();var handlerID=this.props.id;if(handlerID){delete _handlersRegistry.handlerIDToTag[handlerID];}}},{key:\"update\",value:function update(remainingTries){var _this3=this;if(!this.isMountedRef.current){return;}var props=this.props;if(hasUnresolvedRefs(props)&&remainingTries>0){(0,_ghQueueMicrotask.ghQueueMicrotask)(function(){_this3.update(remainingTries-1);});}else{var newConfig=(0,_gestureHandlerCommon.filterConfig)(transformProps?transformProps(this.props):this.props,[].concat((0,_toConsumableArray2.default)(allowedProps),(0,_toConsumableArray2.default)(customNativeProps)),config);if(!(0,_isEqual.default)(this.config,newConfig)){this.updateGestureHandler(newConfig);}}}},{key:\"setNativeProps\",value:function setNativeProps(updates){var mergedProps=(0,_extends2.default)({},this.props,updates);var newConfig=(0,_gestureHandlerCommon.filterConfig)(transformProps?transformProps(mergedProps):mergedProps,[].concat((0,_toConsumableArray2.default)(allowedProps),(0,_toConsumableArray2.default)(customNativeProps)),config);this.updateGestureHandler(newConfig);}},{key:\"render\",value:function render(){var _this$props$testID;if(__DEV__&&!this.context&&!(0,_utils.isJestEnv)()&&_reactNative.Platform.OS!=='web'){throw new Error(name+' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');}var gestureEventHandler=this.onGestureHandlerEvent;var _this$props8=this.props,onGestureEvent=_this$props8.onGestureEvent,onGestureHandlerEvent=_this$props8.onGestureHandlerEvent;if(onGestureEvent&&typeof onGestureEvent!=='function'){if(onGestureHandlerEvent){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureEventHandler=onGestureEvent;}else{if(onGestureHandlerEvent&&typeof onGestureHandlerEvent!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var gestureStateEventHandler=this.onGestureHandlerStateChange;var _this$props9=this.props,onHandlerStateChange=_this$props9.onHandlerStateChange,onGestureHandlerStateChange=_this$props9.onGestureHandlerStateChange;if(onHandlerStateChange&&typeof onHandlerStateChange!=='function'){if(onGestureHandlerStateChange){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureStateEventHandler=onHandlerStateChange;}else{if(onGestureHandlerStateChange&&typeof onGestureHandlerStateChange!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var events={onGestureHandlerEvent:this.state.allowTouches?gestureEventHandler:undefined,onGestureHandlerStateChange:this.state.allowTouches?gestureStateEventHandler:undefined};this.propsRef.current=events;var child=null;try{child=React.Children.only(this.props.children);}catch(e){throw new Error((0,_utils.tagMessage)(name+\" got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.\"));}var grandChildren=child.props.children;if(__DEV__&&child.type&&(child.type==='RNGestureHandlerButton'||child.type.name==='View'||child.type.displayName==='View')){grandChildren=React.Children.toArray(grandChildren);grandChildren.push(React.createElement(_PressabilityDebugView.PressabilityDebugView,{key:\"pressabilityDebugView\",color:\"mediumspringgreen\",hitSlop:child.props.hitSlop}));}return React.cloneElement(child,(0,_extends2.default)({ref:this.refHandler,collapsable:false},(0,_utils.isJestEnv)()?{handlerType:name,handlerTag:this.handlerTag}:{},{testID:(_this$props$testID=this.props.testID)!==null&&_this$props$testID!==void 0?_this$props$testID:child.props.testID},events),grandChildren);}}]);return Handler;}(React.Component);_defineProperty(Handler,\"displayName\",name);_defineProperty(Handler,\"contextType\",_GestureHandlerRootViewContext.default);return Handler;}","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_isEqual","_interopRequireDefault","_RNGestureHandlerModule","_State","_handlersRegistry","_gestureHandlerCommon","_utils","_ActionType","_PressabilityDebugView","_GestureHandlerRootViewContext","_ghQueueMicrotask","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","Boolean","valueOf","UIManagerAny","UIManager","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","registrationName","topOnGestureHandlerStateChange","customGHEventsConfig","_extends2","onGestureHandlerEvent","onGestureHandlerStateChange","isFabric","Platform","OS","genericDirectEventTypes","UIManagerConstants","_UIManagerAny$getView","_UIManagerAny$getView2","getViewManagerConfig","_UIManagerAny$getCons","getConstants","_UIManagerAny$setJSRe","setJSResponder","oldSetJSResponder","_UIManagerAny$clearJS","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","RNGestureHandlerModule","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","stateToPropMappings","_defineProperty3","State","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","_ref","name","_ref$allowedProps","allowedProps","_ref$config","config","transformProps","_ref$customNativeProp","customNativeProps","Handler","_React$Component","_inherits2","_super","_this","_classCallCheck2","_defineProperty","_assertThisInitialized2","event","nativeEvent","handlerTag","onGestureEvent","_this$props$onGesture","_this$props","_this$props$onGesture2","_this$props2","onHandlerStateChange","_this$props$onHandler","_this$props3","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","ActionType","JS_FUNCTION_OLD_API","propsRef","registerOldGestureHandler","onGestureStateChange","actionType","_this$props5","_this$props6","_this$props7","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","scheduleFlushOperations","updateGestureHandler","getNextHandlerTag","createRef","isMountedRef","id","handlerIDToTag","Error","_createClass2","key","value","componentDidMount","_this2","inspectorToggleListener","setState","_","update","ghQueueMicrotask","filterConfig","concat","_toConsumableArray2","findNodeHandle","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","handlerID","remainingTries","_this3","deepEqual","setNativeProps","updates","mergedProps","render","_this$props$testID","context","isJestEnv","gestureEventHandler","_this$props8","gestureStateEventHandler","_this$props9","events","tagMessage","grandChildren","type","displayName","toArray","push","createElement","PressabilityDebugView","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","testID","Component","GestureHandlerRootViewContext"],"sources":["/Users/shayan/workspace/godfather/node_modules/react-native-gesture-handler/lib/module/handlers/createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  getNextHandlerTag,\n  registerOldGestureHandler,\n} from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n  scheduleFlushOperations,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\nimport { isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private isMountedRef: React.MutableRefObject<boolean | null>;\n    private viewNode: any;\n    private viewTag?: number;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      this.isMountedRef.current = true;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          if (\n            (this.props?.onGestureEvent &&\n              'current' in this.props.onGestureEvent) ||\n            (this.props?.onHandlerStateChange &&\n              'current' in this.props.onHandlerStateChange)\n          ) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (\n            this.props?.onGestureEvent &&\n            '__isNative' in this.props.onGestureEvent\n          ) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      if (__DEV__ && !this.context && !isJestEnv() && Platform.OS !== 'web') {\n        throw new Error(\n          name +\n            ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.'\n        );\n      }\n\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isJestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}