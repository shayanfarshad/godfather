{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.nativeViewProps=exports.nativeViewHandlerName=exports.nativeViewGestureHandlerProps=exports.NativeViewGestureHandler=void 0;var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _createHandler=_interopRequireDefault(require(\"./createHandler\"));var _gestureHandlerCommon=require(\"./gestureHandlerCommon\");var nativeViewGestureHandlerProps=exports.nativeViewGestureHandlerProps=['shouldActivateOnStart','disallowInterruption'];var nativeViewProps=exports.nativeViewProps=[].concat((0,_toConsumableArray2.default)(_gestureHandlerCommon.baseGestureHandlerProps),nativeViewGestureHandlerProps);var nativeViewHandlerName=exports.nativeViewHandlerName='NativeViewGestureHandler';var NativeViewGestureHandler=exports.NativeViewGestureHandler=(0,_createHandler.default)({name:nativeViewHandlerName,allowedProps:nativeViewProps,config:{}});","map":{"version":3,"names":["_createHandler","_interopRequireDefault","require","_gestureHandlerCommon","nativeViewGestureHandlerProps","exports","nativeViewProps","concat","_toConsumableArray2","default","baseGestureHandlerProps","nativeViewHandlerName","NativeViewGestureHandler","createHandler","name","allowedProps","config"],"sources":["/Users/shayan/workspace/godfather/node_modules/react-native-gesture-handler/lib/module/handlers/NativeViewGestureHandler.ts"],"sourcesContent":["import createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const nativeViewGestureHandlerProps = [\n  'shouldActivateOnStart',\n  'disallowInterruption',\n] as const;\n\nexport interface NativeViewGestureConfig {\n  /**\n   * Android only.\n   *\n   * Determines whether the handler should check for an existing touch event on\n   * instantiation.\n   */\n  shouldActivateOnStart?: boolean;\n\n  /**\n   * When `true`, cancels all other gesture handlers when this\n   * `NativeViewGestureHandler` receives an `ACTIVE` state event.\n   */\n  disallowInterruption?: boolean;\n}\n\nexport interface NativeViewGestureHandlerProps\n  extends BaseGestureHandlerProps<NativeViewGestureHandlerPayload>,\n    NativeViewGestureConfig {}\n\nexport type NativeViewGestureHandlerPayload = {\n  /**\n   * True if gesture was performed inside of containing view, false otherwise.\n   */\n  pointerInside: boolean;\n};\n\nexport const nativeViewProps = [\n  ...baseGestureHandlerProps,\n  ...nativeViewGestureHandlerProps,\n] as const;\n\nexport const nativeViewHandlerName = 'NativeViewGestureHandler';\n\nexport type NativeViewGestureHandler = typeof NativeViewGestureHandler;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const NativeViewGestureHandler = createHandler<\n  NativeViewGestureHandlerProps,\n  NativeViewGestureHandlerPayload\n>({\n  name: nativeViewHandlerName,\n  allowedProps: nativeViewProps,\n  config: {},\n});\n"],"mappings":"oXAAA,IAAAA,cAAA,CAAAC,sBAAA,CAAAC,OAAA,qBACA,IAAAC,qBAAA,CAAAD,OAAA,2BAKO,GAAM,CAAAE,6BAA6B,CAAAC,OAAA,CAAAD,6BAAA,CAAG,CAC3C,uBAD2C,CAE3C,sBAF2C,CAAtC,CAgCA,GAAM,CAAAE,eAAe,CAAAD,OAAA,CAAAC,eAAA,IAAAC,MAAA,IAAAC,mBAAA,CAAAC,OAAA,EACvBC,6CAD0B,EAE1BN,6BAF0B,CAAxB,CAKA,GAAM,CAAAO,qBAAqB,CAAAN,OAAA,CAAAM,qBAAA,CAAG,0BAA9B,CAIA,GAAM,CAAAC,wBAAwB,CAAAP,OAAA,CAAAO,wBAAA,CAAG,GAAAC,sBAAa,EAGnD,CACAC,IAAI,CAAEH,qBADN,CAEAI,YAAY,CAAET,eAFd,CAGAU,MAAM,CAAE,EAHR,CAHmD,CAA9C"},"metadata":{},"sourceType":"script","externalDependencies":[]}