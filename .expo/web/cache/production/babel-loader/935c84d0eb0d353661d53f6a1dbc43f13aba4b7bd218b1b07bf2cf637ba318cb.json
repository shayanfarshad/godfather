{"ast":null,"code":"Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;function setAndForwardRef(_ref){var getForwardedRef=_ref.getForwardedRef,setLocalRef=_ref.setLocalRef;return function forwardRef(ref){var forwardedRef=getForwardedRef();setLocalRef(ref);if(typeof forwardedRef==='function'){forwardedRef(ref);}else if(typeof forwardedRef==='object'&&forwardedRef!=null){forwardedRef.current=ref;}};}var _default=exports.default=setAndForwardRef;","map":{"version":3,"names":["setAndForwardRef","_ref","getForwardedRef","setLocalRef","forwardRef","ref","forwardedRef","current","_default","exports","default"],"sources":["/Users/shayan/workspace/godfather/node_modules/react-native-reanimated/lib/module/createAnimatedComponent/setAndForwardRef.ts"],"sourcesContent":["/**\n * imported from react-native\n */\n\nimport type { MutableRefObject } from 'react';\n\n/**\n * This is a helper function for when a component needs to be able to forward a ref\n * to a child component, but still needs to have access to that component as part of\n * its implementation.\n *\n * Its main use case is in wrappers for native components.\n *\n * Usage:\n *\n *   class MyView extends React.Component {\n *     _nativeRef = null;\n *\n *     _setNativeRef = setAndForwardRef({\n *       getForwardedRef: () => this.props.forwardedRef,\n *       setLocalRef: ref => {\n *         this._nativeRef = ref;\n *       },\n *     });\n *\n *     render() {\n *       return <View ref={this._setNativeRef} />;\n *     }\n *   }\n *\n *   const MyViewWithRef = React.forwardRef((props, ref) => (\n *     <MyView {...props} forwardedRef={ref} />\n *   ));\n *\n *   module.exports = MyViewWithRef;\n */\n\ntype ForwardedRef<T> = () => MutableRefObject<T> | ((ref: T) => void);\n\nfunction setAndForwardRef<T>({\n  getForwardedRef,\n  setLocalRef,\n}: {\n  getForwardedRef: ForwardedRef<T>;\n  setLocalRef: (ref: T) => void;\n}): (ref: T) => void {\n  return function forwardRef(ref: T) {\n    const forwardedRef = getForwardedRef();\n\n    setLocalRef(ref);\n\n    // Forward to user ref prop (if one has been specified)\n    if (typeof forwardedRef === 'function') {\n      // Handle function-based refs. String-based refs are handled as functions.\n      forwardedRef(ref);\n    } else if (typeof forwardedRef === 'object' && forwardedRef != null) {\n      // Handle createRef-based refs\n      forwardedRef.current = ref;\n    }\n  };\n}\n\nexport default setAndForwardRef;\n"],"mappings":"gFAuCA,QAAS,CAAAA,gBAAgBA,CAAAC,IAAA,CAMJ,IALnB,CAAAC,eAAe,CAKhBD,IAAA,CALCC,eAAe,CACfC,WAAA,CAIDF,IAAA,CAJCE,WAAA,CAKA,MAAO,SAAS,CAAAC,UAAUA,CAACC,GAAM,CAAE,CACjC,GAAM,CAAAC,YAAY,CAAGJ,eAAe,EAAE,CAEtCC,WAAW,CAACE,GAAG,CAAC,CAGhB,GAAI,MAAO,CAAAC,YAAY,GAAK,UAAU,CAAE,CAEtCA,YAAY,CAACD,GAAG,CAAC,CACnB,CAAC,IAAM,IAAI,MAAO,CAAAC,YAAY,GAAK,QAAQ,EAAIA,YAAY,EAAI,IAAI,CAAE,CAEnEA,YAAY,CAACC,OAAO,CAAGF,GAAG,CAC5B,CACF,CAAC,CACH,KAAAG,QAAA,CAAAC,OAAA,CAAAC,OAAA,CAEeV,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}