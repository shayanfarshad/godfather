{"ast":null,"code":"Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _reactNative=require(\"react-native\");var _browser=require(\"./environment/browser\");var Platform={OS:_reactNative.Platform.OS,select:_reactNative.Platform.select,isDOMAvailable:_browser.isDOMAvailable,canUseEventListeners:_browser.canUseEventListeners,canUseViewport:_browser.canUseViewport,isAsyncDebugging:_browser.isAsyncDebugging};var _default=exports.default=Platform;","map":{"version":3,"names":["_reactNative","require","_browser","Platform","OS","ReactNativePlatform","select","isDOMAvailable","canUseEventListeners","canUseViewport","isAsyncDebugging","_default","exports","default"],"sources":["/Users/shayan/workspace/godfather/node_modules/expo-modules-core/src/Platform.ts"],"sourcesContent":["import { Platform as ReactNativePlatform, PlatformOSType } from 'react-native';\n\nimport {\n  isDOMAvailable,\n  canUseEventListeners,\n  canUseViewport,\n  isAsyncDebugging,\n} from './environment/browser';\n\nexport type PlatformSelectOSType = PlatformOSType | 'native' | 'electron' | 'default';\n\nexport type PlatformSelect = <T>(specifics: { [platform in PlatformSelectOSType]?: T }) => T;\n\nconst Platform = {\n  /**\n   * Denotes the currently running platform.\n   * Can be one of ios, android, web.\n   */\n  OS: ReactNativePlatform.OS,\n  /**\n   * Returns the value with the matching platform.\n   * Object keys can be any of ios, android, native, web, default.\n   *\n   * @ios ios, native, default\n   * @android android, native, default\n   * @web web, default\n   */\n  select: ReactNativePlatform.select as PlatformSelect,\n  /**\n   * Denotes if the DOM API is available in the current environment.\n   * The DOM is not available in native React runtimes and Node.js.\n   */\n  isDOMAvailable,\n  /**\n   * Denotes if the current environment can attach event listeners\n   * to the window. This will return false in native React\n   * runtimes and Node.js.\n   */\n  canUseEventListeners,\n  /**\n   * Denotes if the current environment can inspect properties of the\n   * screen on which the current window is being rendered. This will\n   * return false in native React runtimes and Node.js.\n   */\n  canUseViewport,\n  /**\n   * If the JavaScript is being executed in a remote JavaScript environment.\n   * When `true`, synchronous native invocations cannot be executed.\n   */\n  isAsyncDebugging,\n};\n\nexport default Platform;\n"],"mappings":"gFAAA,IAAAA,YAAA,CAAAC,OAAA,iBAEA,IAAAC,QAAA,CAAAD,OAAA,0BAWA,GAAM,CAAAE,QAAQ,CAAG,CAKfC,EAAE,CAAEC,qBAAmB,CAACD,EAAE,CAS1BE,MAAM,CAAED,qBAAmB,CAACC,MAAwB,CAKpDC,cAAc,CAAdA,uBAAc,CAMdC,oBAAoB,CAApBA,6BAAoB,CAMpBC,cAAc,CAAdA,uBAAc,CAKdC,gBAAgB,CAAhBA,yB,CACD,CAAC,IAAAC,QAAA,CAAAC,OAAA,CAAAC,OAAA,CAEaV,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}