{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=getStateFromPath;var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _extends4=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _escapeStringRegexp=_interopRequireDefault(require(\"escape-string-regexp\"));var queryString=_interopRequireWildcard(require(\"query-string\"));var _findFocusedRoute=_interopRequireDefault(require(\"./findFocusedRoute\"));var _validatePathConfig=_interopRequireDefault(require(\"./validatePathConfig\"));function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2;}function getStateFromPath(path,options){var _ref;if(options){(0,_validatePathConfig.default)(options);}var initialRoutes=[];if(options!==null&&options!==void 0&&options.initialRouteName){initialRoutes.push({initialRouteName:options.initialRouteName,parentScreens:[]});}var screens=options===null||options===void 0?void 0:options.screens;var remaining=path.replace(/\\/+/g,'/').replace(/^\\//,'').replace(/\\?.*$/,'');remaining=remaining.endsWith('/')?remaining:remaining+\"/\";if(screens===undefined){var _routes=remaining.split('/').filter(Boolean).map(function(segment){var name=decodeURIComponent(segment);return{name:name};});if(_routes.length){return createNestedStateObject(path,_routes,initialRoutes);}return undefined;}var configs=(_ref=[]).concat.apply(_ref,(0,_toConsumableArray2.default)(Object.keys(screens).map(function(key){return createNormalizedConfigs(key,screens,[],initialRoutes,[]);}))).sort(function(a,b){if(a.pattern===b.pattern){return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));}if(a.pattern.startsWith(b.pattern)){return-1;}if(b.pattern.startsWith(a.pattern)){return 1;}var aParts=a.pattern.split('/');var bParts=b.pattern.split('/');for(var i=0;i<Math.max(aParts.length,bParts.length);i++){if(aParts[i]==null){return 1;}if(bParts[i]==null){return-1;}var aWildCard=aParts[i]==='*'||aParts[i].startsWith(':');var bWildCard=bParts[i]==='*'||bParts[i].startsWith(':');if(aWildCard&&bWildCard){continue;}if(aWildCard){return 1;}if(bWildCard){return-1;}}return bParts.length-aParts.length;});configs.reduce(function(acc,config){if(acc[config.pattern]){var a=acc[config.pattern].routeNames;var b=config.routeNames;var intersects=a.length>b.length?b.every(function(it,i){return a[i]===it;}):a.every(function(it,i){return b[i]===it;});if(!intersects){throw new Error(\"Found conflicting screens with the same pattern. The pattern '\"+config.pattern+\"' resolves to both '\"+a.join(' > ')+\"' and '\"+b.join(' > ')+\"'. Patterns must be unique and cannot resolve to more than one screen.\");}}return(0,_extends4.default)(acc,(0,_defineProperty2.default)({},config.pattern,config));},{});if(remaining==='/'){var match=configs.find(function(config){return config.path===''&&config.routeNames.every(function(name){var _configs$find;return!((_configs$find=configs.find(function(c){return c.screen===name;}))!==null&&_configs$find!==void 0&&_configs$find.path);});});if(match){return createNestedStateObject(path,match.routeNames.map(function(name){return{name:name};}),initialRoutes,configs);}return undefined;}var result;var current;var _matchAgainstConfigs=matchAgainstConfigs(remaining,configs.map(function(c){return(0,_extends4.default)({},c,{regex:c.regex?new RegExp(c.regex.source+'$'):undefined});})),routes=_matchAgainstConfigs.routes,remainingPath=_matchAgainstConfigs.remainingPath;if(routes!==undefined){current=createNestedStateObject(path,routes,initialRoutes,configs);remaining=remainingPath;result=current;}if(current==null||result==null){return undefined;}return result;}var joinPaths=function joinPaths(){var _ref2;for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return(_ref2=[]).concat.apply(_ref2,(0,_toConsumableArray2.default)(paths.map(function(p){return p.split('/');}))).filter(Boolean).join('/');};var matchAgainstConfigs=function matchAgainstConfigs(remaining,configs){var routes;var remainingPath=remaining;var _loop=function _loop(){if(!config.regex){return 0;}var match=remainingPath.match(config.regex);if(match){var matchedParams=(_config$pattern=config.pattern)===null||_config$pattern===void 0?void 0:_config$pattern.split('/').filter(function(p){return p.startsWith(':');}).reduce(function(acc,p,i){return(0,_extends4.default)(acc,(0,_defineProperty2.default)({},p,match[(i+1)*2].replace(/\\//,'')));},{});routes=config.routeNames.map(function(name){var _config$path;var config=configs.find(function(c){return c.screen===name;});var params=config===null||config===void 0?void 0:(_config$path=config.path)===null||_config$path===void 0?void 0:_config$path.split('/').filter(function(p){return p.startsWith(':');}).reduce(function(acc,p){var value=matchedParams[p];if(value){var _config$parse;var key=p.replace(/^:/,'').replace(/\\?$/,'');acc[key]=(_config$parse=config.parse)!==null&&_config$parse!==void 0&&_config$parse[key]?config.parse[key](value):value;}return acc;},{});if(params&&Object.keys(params).length){return{name:name,params:params};}return{name:name};});remainingPath=remainingPath.replace(match[1],'');return 1;}},_config$pattern,_ret;for(var _iterator=_createForOfIteratorHelperLoose(configs),_step;!(_step=_iterator()).done;){var config=_step.value;_ret=_loop();if(_ret===0)continue;if(_ret===1)break;}return{routes:routes,remainingPath:remainingPath};};var createNormalizedConfigs=function createNormalizedConfigs(screen,routeConfig){var routeNames=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var initials=arguments.length>3?arguments[3]:undefined;var parentScreens=arguments.length>4?arguments[4]:undefined;var parentPattern=arguments.length>5?arguments[5]:undefined;var configs=[];routeNames.push(screen);parentScreens.push(screen);var config=routeConfig[screen];if(typeof config==='string'){var pattern=parentPattern?joinPaths(parentPattern,config):config;configs.push(createConfigItem(screen,routeNames,pattern,config));}else if(typeof config==='object'){var _pattern;if(typeof config.path==='string'){if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}_pattern=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';configs.push(createConfigItem(screen,routeNames,_pattern,config.path,config.parse));}if(config.screens){if(config.initialRouteName){initials.push({initialRouteName:config.initialRouteName,parentScreens:parentScreens});}Object.keys(config.screens).forEach(function(nestedConfig){var _pattern2;var result=createNormalizedConfigs(nestedConfig,config.screens,routeNames,initials,(0,_toConsumableArray2.default)(parentScreens),(_pattern2=_pattern)!=null?_pattern2:parentPattern);configs.push.apply(configs,(0,_toConsumableArray2.default)(result));});}}routeNames.pop();return configs;};var createConfigItem=function createConfigItem(screen,routeNames,pattern,path,parse){pattern=pattern.split('/').filter(Boolean).join('/');var regex=pattern?new RegExp(\"^(\"+pattern.split('/').map(function(it){if(it.startsWith(':')){return\"(([^/]+\\\\/)\"+(it.endsWith('?')?'?':'')+\")\";}return(it==='*'?'.*':(0,_escapeStringRegexp.default)(it))+\"\\\\/\";}).join('')+\")\"):undefined;return{screen:screen,regex:regex,pattern:pattern,path:path,routeNames:(0,_toConsumableArray2.default)(routeNames),parse:parse};};var findParseConfigForRoute=function findParseConfigForRoute(routeName,flatConfig){for(var _iterator2=_createForOfIteratorHelperLoose(flatConfig),_step2;!(_step2=_iterator2()).done;){var config=_step2.value;if(routeName===config.routeNames[config.routeNames.length-1]){return config.parse;}}return undefined;};var findInitialRoute=function findInitialRoute(routeName,parentScreens,initialRoutes){for(var _iterator3=_createForOfIteratorHelperLoose(initialRoutes),_step3;!(_step3=_iterator3()).done;){var config=_step3.value;if(parentScreens.length===config.parentScreens.length){var sameParents=true;for(var i=0;i<parentScreens.length;i++){if(parentScreens[i].localeCompare(config.parentScreens[i])!==0){sameParents=false;break;}}if(sameParents){return routeName!==config.initialRouteName?config.initialRouteName:undefined;}}}return undefined;};var createStateObject=function createStateObject(initialRoute,route,isEmpty){if(isEmpty){if(initialRoute){return{index:1,routes:[{name:initialRoute},route]};}else{return{routes:[route]};}}else{if(initialRoute){return{index:1,routes:[{name:initialRoute},(0,_extends4.default)({},route,{state:{routes:[]}})]};}else{return{routes:[(0,_extends4.default)({},route,{state:{routes:[]}})]};}}};var createNestedStateObject=function createNestedStateObject(path,routes,initialRoutes,flatConfig){var state;var route=routes.shift();var parentScreens=[];var initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);parentScreens.push(route.name);state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){var nestedState=state;while(route=routes.shift()){initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);var nestedStateIndex=nestedState.index||nestedState.routes.length-1;nestedState.routes[nestedStateIndex].state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){nestedState=nestedState.routes[nestedStateIndex].state;}parentScreens.push(route.name);}}route=(0,_findFocusedRoute.default)(state);route.path=path;var params=parseQueryParams(path,flatConfig?findParseConfigForRoute(route.name,flatConfig):undefined);if(params){route.params=(0,_extends4.default)({},route.params,params);}return state;};var parseQueryParams=function parseQueryParams(path,parseConfig){var query=path.split('?')[1];var params=queryString.parse(query);if(parseConfig){Object.keys(params).forEach(function(name){if(Object.hasOwnProperty.call(parseConfig,name)&&typeof params[name]==='string'){params[name]=parseConfig[name](params[name]);}});}return Object.keys(params).length?params:undefined;};","map":{"version":3,"names":["_escapeStringRegexp","_interopRequireDefault","require","queryString","_interopRequireWildcard","_findFocusedRoute","_validatePathConfig","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","next","bind","Array","isArray","_unsupportedIterableToArray","length","done","value","TypeError","minLen","_arrayLikeToArray","toString","slice","constructor","name","from","test","arr","len","arr2","getStateFromPath","path","options","_ref","validatePathConfig","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","decodeURIComponent","createNestedStateObject","configs","concat","apply","_toConsumableArray2","keys","key","createNormalizedConfigs","sort","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","Error","_extends4","_defineProperty2","match","find","_configs$find","c","screen","result","current","_matchAgainstConfigs","matchAgainstConfigs","regex","RegExp","source","remainingPath","joinPaths","_ref2","_len","arguments","paths","_key","p","_loop","matchedParams","_config$pattern","_config$path","params","_config$parse","parse","_ret","_iterator","_step","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","_pattern2","pop","escape","findParseConfigForRoute","routeName","flatConfig","_iterator2","_step2","findInitialRoute","_iterator3","_step3","sameParents","createStateObject","initialRoute","route","isEmpty","index","state","shift","nestedState","nestedStateIndex","findFocusedRoute","parseQueryParams","parseConfig","query"],"sources":["/Users/shayan/workspace/godfather/node_modules/@react-navigation/core/src/getStateFromPath.tsx"],"sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (\n        Object.hasOwnProperty.call(parseConfig, name) &&\n        typeof params[name] === 'string'\n      ) {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}