{"ast":null,"code":"Object.defineProperty(exports,\"__esModule\",{value:true});exports.Bezier=void 0;var _worklet_10454951261768_init_data={code:\"function Bezier(mX1,mY1,mX2,mY2){const NEWTON_ITERATIONS=4;const NEWTON_MIN_SLOPE=0.001;const SUBDIVISION_PRECISION=0.0000001;const SUBDIVISION_MAX_ITERATIONS=10;const kSplineTableSize=11;const kSampleStepSize=1.0/(kSplineTableSize-1.0);function A(aA1,aA2){'worklet';return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){'worklet';return 3.0*aA2-6.0*aA1;}function C(aA1){'worklet';return 3.0*aA1;}function calcBezier(aT,aA1,aA2){'worklet';return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}function getSlope(aT,aA1,aA2){'worklet';return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,aA,aB,mX1,mX2){'worklet';let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){'worklet';for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}function LinearEasing(x){'worklet';return x;}if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new Error('[Reanimated] Bezier x values must be in [0, 1] range.');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}const sampleValues=new Array(kSplineTableSize);for(let i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}function getTForX(aX){'worklet';let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function BezierEasing(x){'worklet';if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};}\"};var _worklet_7696928702327_init_data={code:\"function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}\"};var _worklet_3169786778773_init_data={code:\"function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}\"};var _worklet_6399610653367_init_data={code:\"function C(aA1){return 3.0*aA1;}\"};var _worklet_11609037530968_init_data={code:\"function calcBezier(aT,aA1,aA2){const{A,B,C}=this.__closure;return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}\"};var _worklet_15662297546628_init_data={code:\"function getSlope(aT,aA1,aA2){const{A,B,C}=this.__closure;return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}\"};var _worklet_16662566953555_init_data={code:\"function binarySubdivide(aX,aA,aB,mX1,mX2){const{SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS,calcBezier}=this.__closure;let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}\"};var _worklet_4538502018300_init_data={code:\"function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){const{NEWTON_ITERATIONS,getSlope,calcBezier}=this.__closure;for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}\"};var _worklet_3962143445177_init_data={code:\"function LinearEasing(x){return x;}\"};var _worklet_1358253373504_init_data={code:\"function getTForX(aX){const{kSplineTableSize,sampleValues,kSampleStepSize,getSlope,mX1,mX2,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide}=this.__closure;let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}\"};var _worklet_5389798763829_init_data={code:\"function BezierEasing(x){const{mX1,mY1,mX2,mY2,calcBezier,getTForX}=this.__closure;if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);}\"};var Bezier=exports.Bezier=function(){var Bezier=function Bezier(mX1,mY1,mX2,mY2){var NEWTON_ITERATIONS=4;var NEWTON_MIN_SLOPE=0.001;var SUBDIVISION_PRECISION=0.0000001;var SUBDIVISION_MAX_ITERATIONS=10;var kSplineTableSize=11;var kSampleStepSize=1.0/(kSplineTableSize-1.0);var A=function(){var A=function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;};A.__closure={};A.__initData=_worklet_7696928702327_init_data;A.__workletHash=7696928702327;return A;}();var B=function(){var B=function B(aA1,aA2){return 3.0*aA2-6.0*aA1;};B.__closure={};B.__initData=_worklet_3169786778773_init_data;B.__workletHash=3169786778773;return B;}();var C=function(){var C=function C(aA1){return 3.0*aA1;};C.__closure={};C.__initData=_worklet_6399610653367_init_data;C.__workletHash=6399610653367;return C;}();var calcBezier=function(){var calcBezier=function calcBezier(aT,aA1,aA2){return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;};calcBezier.__closure={A:A,B:B,C:C};calcBezier.__initData=_worklet_11609037530968_init_data;calcBezier.__workletHash=11609037530968;return calcBezier;}();var getSlope=function(){var getSlope=function getSlope(aT,aA1,aA2){return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);};getSlope.__closure={A:A,B:B,C:C};getSlope.__initData=_worklet_15662297546628_init_data;getSlope.__workletHash=15662297546628;return getSlope;}();var binarySubdivide=function(){var binarySubdivide=function binarySubdivide(aX,aA,aB,mX1,mX2){var currentX;var currentT;var i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;};binarySubdivide.__closure={SUBDIVISION_PRECISION:SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS:SUBDIVISION_MAX_ITERATIONS,calcBezier:calcBezier};binarySubdivide.__initData=_worklet_16662566953555_init_data;binarySubdivide.__workletHash=16662566953555;return binarySubdivide;}();var newtonRaphsonIterate=function(){var newtonRaphsonIterate=function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;};newtonRaphsonIterate.__closure={NEWTON_ITERATIONS:NEWTON_ITERATIONS,getSlope:getSlope,calcBezier:calcBezier};newtonRaphsonIterate.__initData=_worklet_4538502018300_init_data;newtonRaphsonIterate.__workletHash=4538502018300;return newtonRaphsonIterate;}();var LinearEasing=function(){var LinearEasing=function LinearEasing(x){return x;};LinearEasing.__closure={};LinearEasing.__initData=_worklet_3962143445177_init_data;LinearEasing.__workletHash=3962143445177;return LinearEasing;}();if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new Error('[Reanimated] Bezier x values must be in [0, 1] range.');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}var sampleValues=new Array(kSplineTableSize);for(var i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}var getTForX=function(){var getTForX=function getTForX(aX){var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;var dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}};getTForX.__closure={kSplineTableSize:kSplineTableSize,sampleValues:sampleValues,kSampleStepSize:kSampleStepSize,getSlope:getSlope,mX1:mX1,mX2:mX2,NEWTON_MIN_SLOPE:NEWTON_MIN_SLOPE,newtonRaphsonIterate:newtonRaphsonIterate,binarySubdivide:binarySubdivide};getTForX.__initData=_worklet_1358253373504_init_data;getTForX.__workletHash=1358253373504;return getTForX;}();return function(){var BezierEasing=function BezierEasing(x){if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};BezierEasing.__closure={mX1:mX1,mY1:mY1,mX2:mX2,mY2:mY2,calcBezier:calcBezier,getTForX:getTForX};BezierEasing.__initData=_worklet_5389798763829_init_data;BezierEasing.__workletHash=5389798763829;return BezierEasing;}();};Bezier.__closure={};Bezier.__initData=_worklet_10454951261768_init_data;Bezier.__workletHash=10454951261768;return Bezier;}();","map":{"version":3,"names":["Bezier","exports","mX1","mY1","mX2","mY2","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","A","aA1","aA2","__closure","__initData","_worklet_7696928702327_init_data","__workletHash","B","_worklet_3169786778773_init_data","C","_worklet_6399610653367_init_data","calcBezier","aT","_worklet_11609037530968_init_data","getSlope","_worklet_15662297546628_init_data","binarySubdivide","aX","aA","aB","currentX","currentT","i","Math","abs","_worklet_16662566953555_init_data","newtonRaphsonIterate","aGuessT","currentSlope","_worklet_4538502018300_init_data","LinearEasing","x","_worklet_3962143445177_init_data","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","_worklet_1358253373504_init_data","BezierEasing","_worklet_5389798763829_init_data","_worklet_10454951261768_init_data"],"sources":["/Users/shayan/workspace/godfather/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.ts"],"sourcesContent":["/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\n\nexport function Bezier(\n  mX1: number,\n  mY1: number,\n  mX2: number,\n  mY2: number\n): (x: number) => number {\n  'worklet';\n\n  const NEWTON_ITERATIONS = 4;\n  const NEWTON_MIN_SLOPE = 0.001;\n  const SUBDIVISION_PRECISION = 0.0000001;\n  const SUBDIVISION_MAX_ITERATIONS = 10;\n\n  const kSplineTableSize = 11;\n  const kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\n  function A(aA1: number, aA2: number): number {\n    'worklet';\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n  function B(aA1: number, aA2: number): number {\n    'worklet';\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n  function C(aA1: number) {\n    'worklet';\n    return 3.0 * aA1;\n  }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function calcBezier(aT: number, aA1: number, aA2: number): number {\n    'worklet';\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function getSlope(aT: number, aA1: number, aA2: number): number {\n    'worklet';\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function binarySubdivide(\n    aX: number,\n    aA: number,\n    aB: number,\n    mX1: number,\n    mX2: number\n  ): number {\n    'worklet';\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (\n      Math.abs(currentX) > SUBDIVISION_PRECISION &&\n      ++i < SUBDIVISION_MAX_ITERATIONS\n    );\n    return currentT;\n  }\n\n  function newtonRaphsonIterate(\n    aX: number,\n    aGuessT: number,\n    mX1: number,\n    mX2: number\n  ): number {\n    'worklet';\n    for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n      const currentSlope = getSlope(aGuessT, mX1, mX2);\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n      const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n\n  function LinearEasing(x: number): number {\n    'worklet';\n    return x;\n  }\n\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new Error('[Reanimated] Bezier x values must be in [0, 1] range.');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  // FIXME: Float32Array is not available in Hermes right now\n  //\n  // var float32ArraySupported = typeof Float32Array === 'function';\n  // const sampleValues = float32ArraySupported\n  // ? new Float32Array(kSplineTableSize)\n  // : new Array(kSplineTableSize);\n\n  // Precompute samples table\n  const sampleValues = new Array(kSplineTableSize);\n\n  for (let i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX(aX: number): number {\n    'worklet';\n    let intervalStart = 0.0;\n    let currentSample = 1;\n    const lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    const dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    const guessForT = intervalStart + dist * kSampleStepSize;\n\n    const initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2\n      );\n    }\n  }\n\n  return function BezierEasing(x) {\n    'worklet';\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}