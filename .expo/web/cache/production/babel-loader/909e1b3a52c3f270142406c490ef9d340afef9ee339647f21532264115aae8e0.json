{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=useFocusEvents;var React=_interopRequireWildcard(require(\"react\"));var _NavigationContext=_interopRequireDefault(require(\"./NavigationContext\"));function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}function useFocusEvents(_ref){var state=_ref.state,emitter=_ref.emitter;var navigation=React.useContext(_NavigationContext.default);var lastFocusedKeyRef=React.useRef();var currentFocusedKey=state.routes[state.index].key;React.useEffect(function(){return navigation===null||navigation===void 0?void 0:navigation.addListener('focus',function(){lastFocusedKeyRef.current=currentFocusedKey;emitter.emit({type:'focus',target:currentFocusedKey});});},[currentFocusedKey,emitter,navigation]);React.useEffect(function(){return navigation===null||navigation===void 0?void 0:navigation.addListener('blur',function(){lastFocusedKeyRef.current=undefined;emitter.emit({type:'blur',target:currentFocusedKey});});},[currentFocusedKey,emitter,navigation]);React.useEffect(function(){var lastFocusedKey=lastFocusedKeyRef.current;lastFocusedKeyRef.current=currentFocusedKey;if(lastFocusedKey===undefined&&!navigation){emitter.emit({type:'focus',target:currentFocusedKey});}if(lastFocusedKey===currentFocusedKey||!(navigation?navigation.isFocused():true)){return;}if(lastFocusedKey===undefined){return;}emitter.emit({type:'blur',target:lastFocusedKey});emitter.emit({type:'focus',target:currentFocusedKey});},[currentFocusedKey,emitter,navigation]);}","map":{"version":3,"names":["React","_interopRequireWildcard","require","_NavigationContext","_interopRequireDefault","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","useFocusEvents","_ref","state","emitter","navigation","useContext","NavigationContext","lastFocusedKeyRef","useRef","currentFocusedKey","routes","index","key","useEffect","addListener","current","emit","type","target","undefined","lastFocusedKey","isFocused"],"sources":["/Users/shayan/workspace/godfather/node_modules/@react-navigation/core/src/useFocusEvents.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  emitter: NavigationEventEmitter<EventMapCore<State>>;\n};\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents<State extends NavigationState>({\n  state,\n  emitter,\n}: Options<State>) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(\n    () =>\n      navigation?.addListener('focus', () => {\n        lastFocusedKeyRef.current = currentFocusedKey;\n        emitter.emit({ type: 'focus', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(\n    () =>\n      navigation?.addListener('blur', () => {\n        lastFocusedKeyRef.current = undefined;\n        emitter.emit({ type: 'blur', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({ type: 'blur', target: lastFocusedKey });\n    emitter.emit({ type: 'focus', target: currentFocusedKey });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}