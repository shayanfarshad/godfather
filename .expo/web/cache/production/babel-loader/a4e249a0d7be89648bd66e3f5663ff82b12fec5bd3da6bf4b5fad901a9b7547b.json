{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.fontFamilyNeedsScoping=fontFamilyNeedsScoping;exports.getAssetForSource=getAssetForSource;exports.getNativeFontName=getNativeFontName;exports.loadSingleFontAsync=loadSingleFontAsync;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _expoAsset=require(\"expo-asset\");var _expoModulesCore=require(\"expo-modules-core\");var _ExpoFontLoader=_interopRequireDefault(require(\"./ExpoFontLoader\"));var _Font=require(\"./Font.types\");function uriFromFontSource(asset){if(typeof asset==='string'){return asset||null;}else if(typeof asset==='object'){return asset.uri||asset.localUri||asset.default||null;}else if(typeof asset==='number'){return uriFromFontSource(_expoAsset.Asset.fromModule(asset));}return null;}function displayFromFontSource(asset){return asset.display||_Font.FontDisplay.AUTO;}function fontFamilyNeedsScoping(name){return false;}function getAssetForSource(source){var uri=uriFromFontSource(source);var display=displayFromFontSource(source);if(!uri||typeof uri!=='string'){throwInvalidSourceError(uri);}return{uri:uri,display:display};}function throwInvalidSourceError(source){var type=typeof source;if(type==='object')type=JSON.stringify(source,null,2);throw new _expoModulesCore.CodedError(\"ERR_FONT_SOURCE\",\"Expected font asset of type `string | FontResource | Asset` instead got: \"+type);}function loadSingleFontAsync(name,input){return _regenerator.default.async(function loadSingleFontAsync$(_context){while(1)switch(_context.prev=_context.next){case 0:if(typeof input!=='object'||typeof input.uri!=='string'||input.downloadAsync){throwInvalidSourceError(input);}_context.next=3;return _regenerator.default.awrap(_ExpoFontLoader.default.loadAsync(name,input));case 3:case\"end\":return _context.stop();}},null,null,null,Promise);}function getNativeFontName(name){return name;}","map":{"version":3,"names":["_expoAsset","require","_expoModulesCore","_ExpoFontLoader","_interopRequireDefault","_Font","uriFromFontSource","asset","uri","localUri","default","Asset","fromModule","displayFromFontSource","display","FontDisplay","AUTO","fontFamilyNeedsScoping","name","getAssetForSource","source","throwInvalidSourceError","type","JSON","stringify","CodedError","loadSingleFontAsync","input","_regenerator","async","loadSingleFontAsync$","_context","prev","next","downloadAsync","awrap","ExpoFontLoader","loadAsync","stop","Promise","getNativeFontName"],"sources":["/Users/shayan/workspace/godfather/node_modules/expo-font/src/FontLoader.web.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport { CodedError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontResource, FontSource, FontDisplay } from './Font.types';\n\nfunction uriFromFontSource(asset: any): string | null {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || asset.default || null;\n  } else if (typeof asset === 'number') {\n    return uriFromFontSource(Asset.fromModule(asset));\n  }\n  return null;\n}\n\nfunction displayFromFontSource(asset: any): FontDisplay | undefined {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return false;\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  const uri = uriFromFontSource(source);\n  const display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri!,\n    display,\n  };\n}\n\nfunction throwInvalidSourceError(source: any): never {\n  let type: string = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\n    `ERR_FONT_SOURCE`,\n    `Expected font asset of type \\`string | FontResource | Asset\\` instead got: ${type}`\n  );\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || (input as any).downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n\n  await ExpoFontLoader.loadAsync(name, input);\n}\n\nexport function getNativeFontName(name: string): string {\n  return name;\n}\n"],"mappings":"yZAAA,IAAAA,UAAA,CAAAC,OAAA,eACA,IAAAC,gBAAA,CAAAD,OAAA,sBAEA,IAAAE,eAAA,CAAAC,sBAAA,CAAAH,OAAA,sBACA,IAAAI,KAAA,CAAAJ,OAAA,iBAEA,QAAS,CAAAK,iBAAiBA,CAACC,KAAU,EACnC,GAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,CAAE,CAC7B,MAAO,CAAAA,KAAK,EAAI,IAAI,C,CACrB,IAAM,IAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,CAAE,CACpC,MAAO,CAAAA,KAAK,CAACC,GAAG,EAAID,KAAK,CAACE,QAAQ,EAAIF,KAAK,CAACG,OAAO,EAAI,IAAI,C,CAC5D,IAAM,IAAI,MAAO,CAAAH,KAAK,GAAK,QAAQ,CAAE,CACpC,MAAO,CAAAD,iBAAiB,CAACK,gBAAK,CAACC,UAAU,CAACL,KAAK,CAAC,CAAC,C,CAEnD,MAAO,KAAI,CACb,CAEA,QAAS,CAAAM,qBAAqBA,CAACN,KAAU,EACvC,MAAO,CAAAA,KAAK,CAACO,OAAO,EAAIC,iBAAW,CAACC,IAAI,CAC1C,CAEM,QAAU,CAAAC,sBAAsBA,CAACC,IAAY,EACjD,MAAO,MAAK,CACd,CAEM,QAAU,CAAAC,iBAAiBA,CAACC,MAAkB,EAClD,GAAM,CAAAZ,GAAG,CAAGF,iBAAiB,CAACc,MAAM,CAAC,CACrC,GAAM,CAAAN,OAAO,CAAGD,qBAAqB,CAACO,MAAM,CAAC,CAE7C,GAAI,CAACZ,GAAG,EAAI,MAAO,CAAAA,GAAG,GAAK,QAAQ,CAAE,CACnCa,uBAAuB,CAACb,GAAG,CAAC,C,CAG9B,MAAO,CACLA,GAAG,CAAEA,GAAI,CACTM,OAAO,CAAPA,O,CACD,CACH,CAEA,QAAS,CAAAO,uBAAuBA,CAACD,MAAW,EAC1C,GAAI,CAAAE,IAAI,CAAW,MAAO,CAAAF,MAAM,CAChC,GAAIE,IAAI,GAAK,QAAQ,CAAEA,IAAI,CAAGC,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAE,IAAI,CAAE,CAAC,CAAC,CAC7D,KAAM,IAAI,CAAAK,2BAAU,+FAE4DH,IAAM,CACrF,CACH,CAEO,QAAe,CAAAI,mBAAmBA,CACvCR,IAAY,CACZS,KAA2B,SAAAC,YAAA,CAAAlB,OAAA,CAAAmB,KAAA,UAAAC,qBAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAE3B,GAAI,MAAO,CAAAN,KAAK,GAAK,QAAQ,EAAI,MAAO,CAAAA,KAAK,CAACnB,GAAG,GAAK,QAAQ,EAAKmB,KAAa,CAACO,aAAa,CAAE,CAC9Fb,uBAAuB,CAACM,KAAK,CAAC,C,CAC/BI,QAAA,CAAAE,IAAA,UAAAL,YAAA,CAAAlB,OAAA,CAAAyB,KAAA,CAEKC,uBAAc,CAACC,SAAS,CAACnB,IAAI,CAAES,KAAK,CAAC,0BAAAI,QAAA,CAAAO,IAAA,qBAAAC,OAAA,GAGvC,QAAU,CAAAC,iBAAiBA,CAACtB,IAAY,EAC5C,MAAO,CAAAA,IAAI,CACb"},"metadata":{},"sourceType":"script","externalDependencies":[]}